=head1 NAME

Life with qmail

=head1 Introduction

=head2 Audience

B<Life with qmail> is aimed at everyone interested in running
I<qmail>, from the rank amateur (I<newbie>) who just installed Linux
on a spare PC all the way up to the experienced system administrator
or mail administrator. If you find it lacking or unclear, please let
me know. Send comments to I<lwq@sill.org>.

There's a wealth of information available on I<qmail> from a variety
of sources. Some is targeted to newbies, some assumes that the reader
is more experienced. B<Life with qmail> is an attempt to "glue" this
information into a single source, filling in some of the cracks and
assuming only that the reader has basic skills such as:

=over 4

=item *

Manipulating files/directories under UNIX

=item *

Operating a web browser or FTP client

=item *

Following directions

=back

=head2 What is I<qmail>?

I<qmail> is an Internet Mail Transfer Agent (MTA) for UNIX-like
operating systems. It's a drop-in replacement for the I<Sendmail>
system provided with UNIX operating systems. I<qmail> uses the Simple
Mail Transfer Protocol (SMTP) to exchange messages with MTA's on other
systems.

B<Note: >The name is "qmail", not "Qmail".

=head2 Why use I<qmail>?

Your operating system included an MTA, probably I<Postfix> or
I<Sendmail>, so if you're reading this document you're probably
looking for something different. Some of the advantages of I<qmail>
over vendor-provided MTA's include:

Security

I<qmail> was designed for high security. I<Sendmail> has a long
history of serious security problems. When I<Sendmail> was written,
the Net was a much friendlier place. Everyone knew everyone else, and
there was little need to design and code for high security. Today's
Internet is a much more hostile environment for network servers.
I<Sendmail>'s author, Eric Allman, and the current maintainer, Claus
Assman, have done a good job of tightening up the program, but nothing
short of a redesign can achieve I<true> security.

Performance

I<qmail> parallelizes mail delivery, performing up to 20 deliveries
simultaneously, by default.

Reliability

Once I<qmail> accepts a message, it guarantees that it won't be lost.
I<qmail> also supports a new mailbox format that works reliably I<even
over NFS> without locking.

Simplicity

I<qmail> is smaller than any other equivalently-featured MTA.

B<Note: >The official I<qmail> web page, L<http://cr.yp.to/qmail.html>
covers the advantages of I<qmail> more extensively.

=head2 History

I<qmail> was written by Dan Bernstein (DJB),
L<http://en.wikipedia.org/wiki/Daniel_J._Bernstein>, a math professor
now at the University of Illinois in Chicago. Dr. Bernstein is also
well known for his work in the field of cryptography and for his
lawsuit against the U.S. government regarding the publishing of
encryption source code. See
L<http://en.wikipedia.org/wiki/Bernstein_v._United_States> or
L<http://cr.yp.to/export.html> for information regarding the lawsuit.

The first public release of I<qmail>, beta version 0.70, occurred on
January, 24, 1996. The first gamma release, 0.90, was on August, 1,
1996.

Version 1.0, the first general release, was announced on February, 20,
1997. The current version, 1.03, was released on June, 15, 1998.

The next release is expected to be an evaluation version of 2.0. Some
of things that might appear in version 2 are covered at
L<http://cr.yp.to/qmail/future.html>.

=head2 Features

The I<qmail> web page, L<http://cr.yp.to/qmail.html>, has a
comprehensive list of I<qmail>'s features. This section is based
heavily on that list.

Setup

=over 4

=item *

Automatic adaptation to your UNIX variant--no porting needed

=item *

Automatic per-host configuration

=item *

Quick installation--no big list of decisions to make

=back

Security

=over 4

=item *

Clear separation between addresses, files, and programs

=item *

Minimization of setuid code

=item *

Minimization of root code

=item *

Five-way trust partitioning--security in depth

=item *

Optional logging of one-way message hashes, entire message contents,
etc. (See I<What is QUEUE_EXTRA?> in Appendix E.)

=back

Message construction

=over 4

=item *

I<RFC 822> and I<RFC 1123> compliant

=item *

Full support for address groups

=item *

Automatic conversion of old-style address lists to RFC 822 format

=item *

F<sendmail> command for compatibility with current user agents

=item *

Header line length limited only by memory

=item *

Host masquerading (See I<defaulthost)>

=item *

User masquerading (See I<MAILUSER> and I<MAILHOST>)

=item *

Automatic Mail-Followup-To creation (See I<QMAILMFTFILE>)

=back

SMTP service

=over 4

=item *

I<RFC 821, RFC 1123, RFC 1651, RFC 1652, and RFC 1854> compliant

=item *

8-bit clean

=item *

I<RFC 931/1413>/ident/TAP callback--can help track spammers/forgers

=item *

Relay control--stops unauthorized relaying by outsiders

=item *

No interference between relay control and aliases

=item *

Automatic recognition of local IP addresses

=item *

Per-buffer timeouts

=item *

Hop counting

=item *

Parallelism limit (via I<ucspi-tcp>)

=item *

Refusal of connections from known abusers (via I<ucspi-tcp>)

=item *

Relaying and message rewriting for authorized clients

=item *

Optional RBL/ORBS support (via I<rblsmtpd>)

=back

Queue management

=over 4

=item *

Instant handling of messages added to queue

=item *

Parallelism limits

=item *

Split queue directory--no slowdown when queue gets big

=item *

Quadratic retry schedule--old messages tried less often (see
I<Appendix E>)

=item *

Independent message retry schedules

=item *

Automatic safe queueing--no loss of mail if system crashes

=item *

Automatic per-recipient checkpointing

=item *

Automatic queue cleanups

=item *

Queue viewing (See F<qmail-qread>)

=item *

Detailed delivery statistics (via I<qmailanalog>)

=back

Bounces

=over 4

=item *

QSBMF bounce messages--both machine-readable and human-readable

=item *

HCMSSC support--language-independent I<RFC 1893> error codes

=item *

Double bounces sent to postmaster

=back

Routing by domain

=over 4

=item *

Any number of names for local host (See I<locals>)

=item *

Any number of virtual domains (See I<virtualdomains>)

=item *

Domain wildcards (See I<virtualdomains>)

=item *

Configurable "percent hack" support (See I<percenthack>)

=item *

UUCP hook

=back

SMTP delivery

=over 4

=item *

I<RFC 821, RFC 974, and RFC 1123> compliant

=item *

8-bit clean

=item *

Automatic downed host backoffs

=item *

Artificial routing--smarthost, localnet, mailertable (See
I<smtproutes>)

=item *

per-buffer timeouts

=item *

Passive SMTP queue--perfect for SLIP/PPP (via I<serialmail>)

=item *

AutoTURN support (via I<serialmail>)

=back

Forwarding and mailing lists

=over 4

=item *

I<Sendmail> F<.forward> compatibility (via I<dot-forward>)

=item *

Hashed forwarding databases (via I<fastforward)>

=item *

I<Sendmail> F</etc/aliases> compatibility (via I<fastforward>)

=item *

Address wildcards (See I<.qmail-default>)

=item *

Mailing list owners--automatically divert bounces and vacation
messages

=item *

VERPs--automatic recipient identification for mailing list bounces

=item *

Delivered-To--automatic loop prevention, even across hosts

=back

Local delivery

=over 4

=item *

User-controlled address hierarchy--fred controls fred-anything mbox
delivery

=item *

Reliable NFS delivery (See I<maildir>)

=item *

User-controlled program delivery: procmail etc. (See I<qmail-command>)

=item *

Optional new-mail notification (See qbiff)

=item *

Optional NRUDT return receipts (See qreceipt)

=item *

Conditional filtering (See condredirect and bouncesaying)

=back

POP3 service

=over 4

=item *

I<RFC 1939> compliant

=item *

UIDL support

=item *

TOP support

=item *

APOP hook

=item *

modular password checking (via I<checkpassword>)

=back

=head2 Related packages

I<qmail> follows the classic UNIX philosophy that each tool should
perform a single, well-defined function, and complex functions should
be built by connecting a series of simple tools into a "pipeline". The
alternative is to build more and more complex tools that re-invent
much of the functionality of the simpler tools.

It's not surprising, then, that I<qmail> itself doesn't do everything
everyone might want it to do. Here, then, are some of the most popular
add-ons written for I<qmail>. Of course, many standard UNIX utilities
can also be plugged into I<qmail>.

=over 4

=item *

I<dot-forward>--a I<Sendmail> F<.forward> file compatibility add-on

=item *

I<fastforward>--a I<Sendmail> alias database compatibility add-on

=item *

I<ucspi-tcp>--an I<inetd> replacement

=item *

I<daemontools>--a set of tools for managing daemons and their logs

=item *

I<qmailanalog>--a set of qmail log file analysis tools

=item *

I<serialmail>--tools for mailing over slow networks

=item *

I<mess822>--tools for parsing Internet mail messages

=item *

I<ezmlm>--a mailing list manager for I<qmail>

=back

=head2 Architecture

I<Appendix D> covers I<qmail>'s functional and physical structure. In
a nutshell, I<qmail> consists of a series of programs (modules) that
perform different tasks.

=head2 License

As of 2007-11-30, I<qmail> 1.03 is in the public domain. See
L<http://cr.yp.to/qmail/dist.html>. This means that there are no legal
limits to what you can do with it: you can copy it, give it away, sell
it, modify it, rename it, or use pieces of it in copy-protected works,
without any restrictions.

Other packages by Dan Bernstein, such as I<daemontools> and
I<ucspi-tcp>, are copyrighted by the author, and are not distributed
with a statement of user's rights. In
L<http://cr.yp.to/softwarelaw.html>, he outlines what he thinks your
rights are under U.S. copyright law. See also
L<http://en.wikipedia.org/wiki/License-free_software>.

=head2 Comparison with other MTA's

A book could be written about this topic, but it would be tedious
reading. Here's a quick comparison of I<qmail> with some of the most
common UNIX MTA's.

 MTA      Maturity  Security  Features  PerformanceSendmailishModular
 qmail    medium    high      high      high      addons    yes
 Sendmail high      low       high      low       x         no
 Postfix  medium    high      high      high      yes       yes
 exim     medium    low       high      medium    yes       no
 Courier  low       medium    high      medium    optional  yes

I<Sendmailish> means the MTA behaves like I<Sendmail> in some ways
that would make a switch from I<Sendmail> to the alternative MTA more
user-transparent, such as the use of F<.forward> files,
F</etc/aliases>, and delivery to F</var/spool/mail>.

Jonathan de Boyne Pollard has reviews of many Unix MTAs at
L<http://homepages.tesco.net/~J.deBoynePollard/Reviews/UnixMTSes/>.
Another detailed comparison is available at
L<http://www.geocities.com/mailsoftware42/>.

=head2 Documentation

man pages

The I<qmail> distribution comes with a complete set of F<man> pages.
After installation, they're in F</var/qmail/man>. You'll probably need
to add that directory to your F<MANPATH> environment variable.

 Shell                             Command
 Bourne (/bin/sh)                  MANPATH=$MANPATH:/var/qmail/man; export MANPATH
 bash, Korn                        export MANPATH=$MANPATH:/var/qmail/man
 C Shell                           setenv MANPATH $MANPATH:/var/qmail/man

At this point, commands in the format "F<man
I<name-of-qmail-man-page>>" should display the appropriate man page.

The F<man> pages are also available on-line in HTML format from:

=over 4

=item *

L<http://www.qmail.org/man/index.html>

=back

B<Note: >The I<qmail> man pages are loaded with information, but they
require careful reading because they're written in a very dense,
technical style. You might want to print off a set and read them
through once to familiarize yourself with what's there and where it
is. Very little information is repeated on multiple pages, so if you
don't know where something is covered, it can be hard to find it.

Docs

The I<qmail> distribution includes a series of documents that are
installed under F</var/qmail/doc>. They include:

=over 4

=item *

F<FAQ>: Frequently Asked Questions, with answers

=item *

F<INSTALL*>: Installation documentation

=item *

F<PIC.*>: Descriptions of how I<qmail> performs key tasks. See the
I<Architecture> appendix for more information.

=item *

Various other installation-related documentation

=back

These docs are also available on-line from:

=over 4

=item *

L<http://www.qmail.org/man/index.html>

=back

FAQs

There are two official FAQ (Frequently Asked Questions, with answers)
documents:

=over 4

=item *

F</var/qmail/doc/FAQ>, the plain text version, and

=item *

The web FAQ at L<http://cr.yp.to/qmail/faq.html>.

=back

The web FAQ is more complete.

Books

B<The qmail Handbook>

Dave Sill, the author of B<Life with qmail>, has written a I<qmail>
book for Apress (L<http://www.apress.com/>). This book, B<The qmail
Handbook>, covers everything in this guide, but goes into much more
detail and also covers a lot of new ground.

For more information, see
L<http://www.apress.com/catalog/book/1893115402/>. To order this book
from my bookstore, in association with Amazon.com, see
L<http://www.amazon.com/exec/obidos/ASIN/1893115402/davesill>.

B<Qmail Quickstarter: Install, Set Up and Run your own Email Server>

Kyle Wheeler has written a I<qmail> book for Packt
(L<http://www.packtpub.com/>). As the title suggests, this book is
designed to help people new to I<qmail> to set up a mail server.

To order this book from my bookstore, in association with Amazon.com,
see L<http://www.amazon.com/exec/obidos/ASIN/1847191150/davesill>.

B<qmail>

John Levine has written a I<qmail> book for O'Reilly & Associates
(L<http://www.oreilly.com/>). See L<http://qmail.gurus.com/> for more
info including the Table of Contents and a sample chapter.

To order this book from my bookstore, in association with Amazon.com,
see L<http://www.amazon.com/exec/obidos/ASIN/1565926285/davesill>.

B<Running qmail>

Richard Blum has written B<Running qmail>, which is published by Sams.
This book has received mixed reviews on the I<qmail> mailing list.

For more information or to order this book, see
L<http://www.amazon.com/exec/obidos/ASIN/0672319454/davesill>.

B<qmail: Yuksek Performansli E-Posta Sunucu>

Ismail Yenigul, et al, have written a Turkish-language I<qmail> book.
See L<http://www.acikakademi.com/catalog/qmail/>.

List archives

The I<qmail> e-mail mailing list, maintained by Dan Bernstein, is a
valuable source of information. Web archives of the lists messages are
kept at:

=over 4

=item *

L<http://www.ornl.gov/lists/mailing-lists/qmail/>.

=item *

L<http://tech.groups.yahoo.com/group/djb-qmail/?refstop=1> and

=item *

L<http://securepoint.com/lists/html/Qmail/>.

=back

Most questions about I<qmail> can be answered by searching the list
archives first.

Other Web Sites

=over 4

=item *

L<http://cr.yp.to/qmail.html>: the official I<qmail> home page.

=item *

L<http://www.qmail.org>: the unofficial I<qmail> home page. Contains
lots of information about add-ons and patches, and links to many good
I<qmail> web pages on other sites.

=item *

L<http://www.flounder.net/qmail/qmail-howto.html>: Adam McKenna's
HOWTO.

=back

=head2 Support

Mailing lists

The following lists reside on list.cr.yp.to. In order to prevent
harvesting of e-mail addresses by spammers, I'm avoiding the use of
complete, valid addresses and "mailto" URL's.

The lists are managed by I<ezmlm>, which uses different addresses to
perform different functions:

=over 4

=item *

F<I<listname>@list.cr.yp.to>: the submission address. Messages sent
here go out to all members of the list. Do B<not> send
subscribe/unsubscribe requests here: they won't work, and they'll
annoy the subscribers.

=item *

F<I<listname>-help@list.cr.yp.to>: the "help" address. Returns a list
of command addresses and general usage information.

=item *

F<I<listname>-subscribe>: send a blank message here to subscribe.

=item *

F<I<listname>-unsubscribe>: send a blank message here to unsubscribe.

=back

To specify a subscription/unsubscription address, say
F<joe@example.com>, send the message to:

=over 4

=item *

F<I<listname>-subscribe-joe=example.com@list.cr.yp.to>.

=back

B<qmail>

The main I<qmail> mailing list. For discussion and questions/answers
on most things related to I<qmail>, except those with their own lists.
Read Charles Cazabon's "12 Steps to qmail List Bliss" at
L<http://pyropus.ca/personal/writings/12-steps-to-qmail-list-bliss.html>
before posting. Also read the FAQs and search the I<list archives>
before posting a question. When you ask questions, please try to
include sufficient details to make it possible for people to respond:

=over 4

=item *

B<I<What did you do?>> What's your configuration? Include
F<qmail-showctl> output if you're not sure what's important. What
action did you take? If this is a new installation, tell how you
installed I<qmail>.

=item *

B<I<What did you expect to happen?>> What was the outcome you were
trying to achieve? Don't assume the reader can guess.

=item *

B<I<What B<did> happen?>> Describe the actual result. Include log file
clippings and copies of messages, with headers.

=back

B<Note: >The I<qmail> list uses a utility called F<qsecretary> to
verify that messages posted to the list are not spam. Each message
posted to the list will result in an e-mail confirmation request from
F<qsecretary>. Read the message and follow the directions to confirm
your message--usually just replying to the F<qsecretary> message will
do the trick. Regular list posters often automate this process using
autoresponders like Charles Cazabon's I<pymsgauth>, available from
L<http://pyropus.ca/software/pymsgauth/>. I<pymsgauth> verifies that
message sent to the I<qmail> list really came from you, so it won't
automatically confirm forged messages sent to the list in your name.



B<qmailannounce>

The I<qmail> announcement mailing list. New releases are announced
here. There's no submission address: it's a read-only list.

B<serialmail>

For discussion of the I<serialmail> package.

B<ezmlm>

For discussion of the I<ezmlm> mailing list manager.

Consultants

See L<http://www.qmail.org/top.html#paidsup> for a list of commercial
support providers.

FAQTS Knowledgebase

A database of I<qmail>-related questions and answers is available at
L<http://qmail.faqts.com/>. If you have a question that the FAQ
doesn't answer, try searching this knowledgebase. It's especially good
at answering "how to" questions.

=head1 Installation

This section covers installing I<qmail>. If you're an experienced
system administrator, you can install I<qmail> following the
directions in F<INSTALL> in the source distribution. The F<INSTALL>
directions are the B<official> installation directions. They're more
complex than the B<Life with qmail> directions, and they assume that
the reader is an experienced system and mail administrator. They're
also outdated and don't reflect Bernstein's current recommended
practices.

B<Note: >If you choose to install using the following directions, you
should read through the entire section to familiarize yourself with
the overall process.

=head2 Installation Issues

Binary vs. source code

Before 2007-11-30, I<qmail>'s restrictive licensing regarding the
distribution of prebuilt packages meant that it was usually installed
from a source code distribution. This may change in the future,
expecially if I<daemontools> and I<ucspi-tcp> are placed in the public
domain. For now, though, source code is still the preferred
distribution method for I<qmail>.

If you're not familiar with the distinction between source code and
binaries, imagine ordering a pizza delivered to your house. The
"binary" version of the pizza arrives ready-to-eat. The "source code"
pizza comes as a kit containing flour, yeast, cheese, sauce, toppings,
and directions for cooking the pizza yourself. Source code
installations are a little more work for you, but if you follow the
directions carefully, the result is the same--or even better. The
self-baked pizza will be fresher, you can adjust the toppings to your
preferences, and you'll know a lot more about your pizza and how it
"works".

Safely running an Internet-accesible network service is not easy. An
improperly configured service can put the host system at risk of
attack or can be used to attack other sites--potentially exposing the
administrator to legal liability. The more you know about how your
network services work, the more likely they are to be properly
configured and secure.

Tarball vs. OS-specific package

Some operating systems provide a mechanism for automating source code
installations. Returning to the pizza analogy, they make it possible
to package the ingredients and directions in such a way that you can
just push a button and have the pizza bake itself.

Sounds great, doesn't it?

In practice, it might not be such a good idea. Assembling these
packages is pretty difficult, and they might not do things the way
they're supposed to. They're software, and like any software, they can
have bugs. But even if they're bug free, the convenience they provide
comes at a cost. You lose most of the advantages of the self-baked
pizza: the ability to adjust the toppings to your personal
preferences, and the knowledge of how the pizza was made and how it
works.

If I<qmail> was a pizza, the self-building approach might still be the
way to go. But it's not: it's a fairly complicated system that the
installer/maintainer needs to understand pretty well in order to be
able to keep it working smoothly. The self-installing I<qmail> is
easier to install than the user-installed version, but the
user-installed version is easier to configure and troubleshoot. You
install I<qmail> once on a system, but you will probably have several
opportunities to reconfigure it or try to figure out why mail isn't
flowing the way you think it should.

For this reason, I suggest installing I<qmail> from scratch using the
source code tarball, not a Red Hat RPM or other self-installing
bundle.

=head2 Preparation

Before installing I<qmail> on a system, especially if this is your
first I<qmail> installation, there are a few things you need to think
about.

=over 4

=item *

If possible, install I<qmail> on a "practice" system. This will give
you a chance to make mistakes without losing important mail or
interrupting mail service to your users.

=item *

If you don't have a spare, and your system is already handling mail
using I<sendmail>, I<smail>, or some other MTA, you can install and
test most pieces of I<qmail> without interfering with the existing
service.

=item *

When migrating a system from some other MTA to I<qmail>--even if
you've got some I<qmail> experience under your belt--it's a good idea
to formulate a plan.

=back

=head2 System requirements

I<qmail> will install and run on most UNIX and UNIX-like systems, but
there are few requirements:

=over 4

=item *

About 10 megabytes of free space in the build area during the build.
After the build, you can free all but 4 megabytes by removing the
object files.

=item *

A complete, functioning C development system including a compiler,
system header files, and libraries. The build directions will show you
how to tell if you've got the necessary parts.

=item *

A few megabytes for the binaries, documentation, and configuration
files.

=item *

A safe filesystem for the queue. I<qmail>'s reliability guarantee
requires that the queue reside on a filesystem with traditional BSD
FFS semantics. Most modern local filesystems meet these requirements
with one important exception: the F<link()> system call is often
I<asynchronous>--meaning that the results of the F<link()> operation
might not have been written to disk when the F<link()> call returns.
Bruce Guenter's I<syncdir> library can be used to work around this
problem. See I<syncdir> in the Related Packages appendix for more
information.

=item *

Sufficient disk space for the queue. Small single-user systems only
need a couple megabytes. Large servers may need a couple gigabytes.

=item *

A compatible operating system. Most flavors of UNIX are acceptable.
See F<README> in the source tree for a list of known compatible
releases.

=item *

Access to a domain name server (DNS) is highly recommended. Without
one, I<qmail> can only send to remote systems configured in its
F<smtproutes> config file.

=item *

Adequate network connectivity. I<qmail> was designed for
well-connected systems, so you probably don't want to try to use it
for a mailing list server on a 28.8k dial-up. The I<serialmail>
package was designed to make I<qmail> more compatible with
poorly-connected systems. See the I<serialmail> section in the Related
Packages appendix for more information.

=back

B<Note: >The I<qmail> F<bin> directory must reside on a filesystem
that allows the use of executable and F<setuid()> files. Some OS
distributions automatically mount F</var> with the F<nosuid> or
F<noexec> options enabled. On such systems, either these options
should be disabled or F</var/qmail/bin> should reside on another
filesystem without these options enabled. The I<Create directories>
section describes how to use symbolic links to accomplish the latter.
If F</var> is mounted F<nosuid>, you'll probably see the following
error message in the F<qmail-send> logs:

 delivery : deferral: Sorry,_message_has_wrong_owner._(#4.3.5)



B<Note: >I<qmail> won't install properly under Apple's OS X following
these directions or the ones in the F<INSTALL> file. Eben Pratt has
documented procedures for installing under OS X, available from
L<http://netdevice.com/qmail/#osx>.



=head2 Download the source

OK, so you've got a system meeting the requirements ready for
installing I<qmail>. The first step is to download the source code for
I<qmail> and any other add-ons. You'll need I<qmail>, of course, and
you should probably also get I<ucspi-tcp> and I<daemontools>:

=over 4

=item *

I<qmail>, L<http://www.qmail.org/netqmail-1.06.tar.gz>

=item *

I<ucspi-tcp>, L<http://cr.yp.to/ucspi-tcp/ucspi-tcp-0.88.tar.gz>

=item *

I<daemontools>, L<http://cr.yp.to/daemontools/daemontools-0.76.tar.gz>

=back

Retrieve these files using your web browser, web client (e.g.,
F<wget>), or FTP client.

B<Note: >If any of the links fail, it's probably because the package
has been updated. In that case, you should go to
L<http://cr.yp.to/software.html> and follow the links to download the
current version. It's possible that upgraded versions aren't
compatible with the following instructions, so be sure to read the
release notes in the "Upgrading from previous versions..." sections.

B<Note: >This installation uses the I<netqmail> distribution of
I<qmail>, which consists of the official I<qmail> 1.03 tarball to
which patches that fix a handful of bugs, deficiencies, and
incompatibilities have been applied. See
L<http://www.qmail.org/netqmail/> and the I<netqmail> F<CHANGES> file
for more information.

=head2 Build the source

Verify build environment

The first thing you need to do is make sure that you have the
necessary tools to compile a program. How you determine this depends
on what flavor of UNIX you're using. The easiest way to tell, although
it's not guaranteed, is to I<try> it.

B<Note: >If any one of these tests passes, you can stop and go on to
the next section.

=over 4

=item *

At a command line prompt, type F<cc> and press Enter:

    $ cc

=back
    cc: No input files specified
    $

=over 4

=item *

If you get a similar response, you have a C compiler in your path. If
not, it doesn't necessarily mean you don't have one installed. You
might, but maybe it isn't in your path. Of course it could also mean
that you I<don't> have one. Try these:

=over 8

=item *

F</usr/bin/cc>

=item *

F</usr/bin/gcc>

=item *

F</usr/local/bin/cc>

=item *

F</usr/local/bin/gcc>

=item *

F</usr/ccs/bin/cc>

=back

=item *

If none of these works, you'll have to try something little more
platform specific. At the prompt try one of these, depending on which
OS you're using:

=over 8

=item *

Red Hat Linux: F<rpm -qa | grep gcc> or F<rpm -qa | grep egcs>

=item *

FreeBSD: includes GCC by default

=back

=item *

If you can't find a compiler installed, you'll have to locate one and
install it. Contact your OS vendor or other OS support channel.

=back

In this section we'll go through the actual steps of compiling
I<qmail>. A way to cut-n-paste will come in handy here, but isn't
really necessary.

Unpack the distribution

If you made it this far, you have a working C compiler and copies of
the tarballs. Next, copy or move the tarballs to the directory you
want to do the work in. F</usr/local/src> is a good choice for
I<qmail> and I<ucspi-tcp>. I<daemontools> should be built under
F</package>.

At this time you probably want to become root, if you're not already.

    su
    umask 022
    mkdir -p /usr/local/src
    mv netqmail-1.06.tar.gz ucspi-tcp-0.88.tar.gz /usr/local/src
    mkdir -p /package
    mv daemontools-0.76.tar.gz /package
    chmod 1755 /package

Now you can unpack the packages.

    cd /usr/local/src
    gunzip netqmail-1.06.tar.gz
    tar xpf netqmail-1.06.tar
    gunzip ucspi-tcp-0.88.tar.gz
    tar xpf ucspi-tcp-0.88.tar
    rm *.tar      # optional, unless space is very tight
    cd /package
    gunzip daemontools-0.76.tar.gz
    tar xpf daemontools-0.76.tar
    rm *.tar      # optional, again

There should now be directories called
F</usr/local/src/netqmail-1.06>, F</usr/local/src/ucspi-tcp-0.88>, and
F</package/admin/daemontools-0.76>.

Create directories

Since I<qmail>'s installation program creates the subdirectories as
they're needed, you only need to create the I<qmail> "home" directory:

    mkdir /var/qmail

And on to the next section.

B<Note: >If you want some or all of the I<qmail> files to reside
elsewhere than F</var>, this can be accomplished by creating symbolic
links under F</var/qmail> pointing to the other locations.

For I<B<example>>, the I<qmail> configuration files can be stored in
F</etc/qmail> by doing:

    mkdir /etc/qmail
    ln -s /etc/qmail /var/qmail/control



Create users and groups

The easiest way to create the necessary users and groups is to create
a little script file to do it for you.  In the source directory you'll
find a file called  F<INSTALL.ids>.  It contains the command lines for
many platforms, so copying the file to another name and editing that
is quick and easy.

    cd /usr/local/src/netqmail-1.06
    cp INSTALL.ids IDS

Then, using your favorite editor, remove all of the file B<except> the
lines you want.  For example, here's what F<IDS> would look like for
FreeBSD after editing:

    pw groupadd nofiles
    pw useradd qmaild -g nofiles -d /var/qmail -s /nonexistent
    pw useradd alias -g nofiles -d /var/qmail/alias -s /nonexistent
    pw useradd qmaill -g nofiles -d /var/qmail -s /nonexistent
    pw useradd qmailp -g nofiles -d /var/qmail -s /nonexistent
    pw groupadd qmail
    pw useradd qmailq -g qmail -d /var/qmail -s /nonexistent
    pw useradd qmailr -g qmail -d /var/qmail -s /nonexistent
    pw useradd qmails -g qmail -d /var/qmail -s /nonexistent

Then to run it, either use F<chmod> to make it executable or run it
with F<sh>:

First method:

    chmod 700 IDS
    ./IDS

Second method:

    /bin/sh IDS

When the script finishes, all of your users and groups will be created
and you can go on to the next section.

But what do you do if your system isn't listed in F<INSTALL.ids>?
You'll have to create them manually.  Start by using your favorite
editor and editing F</etc/group>.  You need to add the following two
lines to the end of the file:

    qmail:*:2107:
    nofiles:*:2108:

B<Note: >Make sure that 2107 and 2108 aren't already used. If they are
used, select two numbers that aren't already in use.

Next, using F<vipw> (most systems have it, if not you'll need to use
your editor again but this time on F</etc/passwd>) add these lines to
the end of the file:

    alias:*:7790:2108::/var/qmail/alias:/bin/true
    qmaild:*:7791:2108::/var/qmail:/bin/true
    qmaill:*:7792:2108::/var/qmail:/bin/true
    qmailp:*:7793:2108::/var/qmail:/bin/true
    qmailq:*:7794:2107::/var/qmail:/bin/true
    qmailr:*:7795:2107::/var/qmail:/bin/true
    qmails:*:7796:2107::/var/qmail:/bin/true

B<Note: >Make sure 7790-7796 aren't already in use and that 2107 and
2108 are the same group ids you used above. If any of these UID's are
already being used, select numbers that aren't already in use.

You don't specifically need to add any of these lines to the I<end> of
the file, that's just the easiest way to explain it here.

You're now ready to continue on to the next section.

Do the build

Now you can start building I<qmail>. Change to the
F</usr/local/src/netqmail-1.05/netqmail-1.05> directory and let's get
started:

    cd /usr/local/src/netqmail-1.06

In the I<Verify Build Environment> section, you located your C
compiler. If it's not called F<cc> or the directory it resides in
isn't in your F<PATH> environment variable, you'll need to edit
F<conf-cc> and F<conf-ld>. Say your compiler is F<gcc>, and it's in
your F<PATH>. Simply edit F<conf-cc> and F<conf-ld> and replace "cc"
with "gcc".

Now type the following:

    make setup check

After the build is complete, you'll need to do your post installation
configuration. A couple of scripts are provided to make this job a lot
easier.

If your DNS is configured properly, this script should be all you need
at this point:

    ./config

If, for some reason, F<config> can't find your hostname in DNS, you'll
have to run the F<config-fast> script:

    ./config-fast the.full.hostname

For example, if your domain is example.com and the hostname of your
computer is dolphin, your config-fast line would look like this:

    ./config-fast dolphin.example.com

B<Note: >On a small local LAN you might want to use a pseudo domain
such as ".local". E.g., if your hostname is "mash", you could do
F<./config-fast mash.local>. If you do this, be sure to configure
I<qmail> to use a valid Internet domain name in return addresses. (See
section 3, I<Configuration>.)

I<qmail> is now installed on your system and is ready to be run! The
next section will guide you through the steps of starting and testing
qmail.

=head2 Install ucspi-tcp

Earlier, you unpacked the I<qmail>, I<ucspi-tcp>, and I<daemontools>
tarballs. Now change to the I<ucspi-tcp> directory:

    cd /usr/local/src/ucspi-tcp-0.88

In the I<Do the build> section, if you modified F<conf-cc> and
F<conf-ld>, you'll need to make the same changes in this directory.

Then do:

    patch < /usr/local/src/netqmail-1.06/other-patches/ucspi-tcp-0.88.errno.patch
    make
    make setup check

That's it. I<ucspi-tcp> is installed.

=head2 Install daemontools

Change to the I<daemontools> build directory:

    cd /package/admin/daemontools-0.76

Once again, if you modified <conf-cc> and F<conf-ld> during the
I<qmail> and I<ucspi-tcp> builds, you'll need to make the same changes
in the F<src> directory.

Then do:

    cd src
    patch < /usr/local/src/netqmail-1.06/other-patches/daemontools-0.76.errno.patch
    cd ..
    package/install

On BSD systems (no F</etc/inittab>), you'll need to reboot at this
point to start F<svscan>, the master service control daemon.

Use "F<ps -ef | grep svscan>" or "F<ps waux | grep svscan>" to verify
that F<svscan> is running.

B<Note: >Under Solaris, you'll have to modify the F</etc/inittab>
entry that starts F<svscan> from:

  SV:123456:respawn:/command/svscanboot

to:

  SV:123456:respawn:/command/svscanboot </dev/null >/var/log/svscan 2>&1

or:

  SV:123456:respawn:/command/svscanboot </dev/null >/dev/msglog 2>&1

Depending upon whether you want error messages resutling from starting
F<svscan> to be sent to a log file or the system console. For an
explanation of why this is necessary, see:

L<http://marc.theaimsgroup.com/?l=log&m=100327801309834&w=2>



B<Note: >A Slackware user reports that the F<SV> F</etc/inittab> entry
has to be moved before the F<x1> entry or F<svscan> won't be started
at boot-up.

=head2 Start I<qmail>

F</var/qmail/rc>

The F</var/qmail/boot> directory contains example I<qmail> boot
scripts for different configurations: F</var/spool/mail> vs.
F<$HOME/Mailbox>, using I<procmail> or I<dot-forward>, and various
combinations of these. Feel free to examine these, but for our
installation, we'll use the following script:

 #!/bin/sh

# Using stdout for logging
# Using control/defaultdelivery from qmail-local to deliver messages by default

exec env - PATH="/var/qmail/bin:$PATH" \
qmail-start "`cat /var/qmail/control/defaultdelivery`"

B<Note: >This script uses backquotes (F<`>), not single quotes (F<'>).
For best results, copy and paste the scripts in this guide instead of
retyping them.

Use your editor to create the above F</var/qmail/rc>, then execute
these commands:

    chmod 755 /var/qmail/rc
    mkdir /var/log/qmail

At this point you need to decide the default delivery mode for
messages that aren't delivered by a .qmail file. The following table
outlines some common choices.

 Mailbox formatName         Location      defaultdeliveryComments
 mbox         Mailbox       $HOME         ./Mailbox     most common, works with most MUA's
 maildir      Maildir       $HOME         ./Maildir/    more reliable, less MUA support
 mbox         username      /var/spool/mailSee INSTALL.vsmtraditional UNIX mailbox

See F<INSTALL.mbox>, F<INSTALL.maildir>, and F<INSTALL.vsm> for more
information.

To select your default mailbox type, just enter the I<defaultdelivery>
value from the table into F</var/qmail/control/defaultdelivery>. E.g.,
to select the standard I<qmail> F<Mailbox> delivery, do:

    echo ./Mailbox >/var/qmail/control/defaultdelivery

B<Note: >F<defaultdelivery> isn't a standard I<qmail> control file.
It's a feature of the above F</var/qmail/rc> file. The
I<defaultdelivery> argument to F<qmail-start> is the I<contents> of a
F<.qmail> file that specifies delivery instructions to be followed
when no actual F<.qmail> is found. Putting these instructions in a
separate control file eliminates the need to quote shell
metacharacters in the delivery instructions and avoids messy
multi-line command arguments.

System start-up files

The F<qmailctl> script

If you were to manually execute the F</var/qmail/rc> script, I<qmail>
would be I<partially> started. But we want I<qmail> started up
automatically every time the system is booted and we want it shut down
cleanly when the system is halted.

This is accomplished by creating a startup/shutdown script like the
following in F</var/qmail/bin/qmailctl>:

 #!/bin/sh

# description: the qmail MTA

PATH=/var/qmail/bin:/bin:/usr/bin:/usr/local/bin:/usr/local/sbin
export PATH

QMAILDUID=`id -u qmaild`
NOFILESGID=`id -g qmaild`

case "$1" in
  start)
    echo "Starting qmail"
    if svok /service/qmail-send ; then
      svc -u /service/qmail-send /service/qmail-send/log
    else
      echo "qmail-send supervise not running"
    fi
    if svok /service/qmail-smtpd ; then
      svc -u /service/qmail-smtpd /service/qmail-smtpd/log
    else
      echo "qmail-smtpd supervise not running"
    fi
    if [ -d /var/lock/subsys ]; then
      touch /var/lock/subsys/qmail
    fi
    ;;
  stop)
    echo "Stopping qmail..."
    echo "  qmail-smtpd"
    svc -d /service/qmail-smtpd /service/qmail-smtpd/log
    echo "  qmail-send"
    svc -d /service/qmail-send /service/qmail-send/log
    if [ -f /var/lock/subsys/qmail ]; then
      rm /var/lock/subsys/qmail
    fi
    ;;
  stat)
    svstat /service/qmail-send
    svstat /service/qmail-send/log
    svstat /service/qmail-smtpd
    svstat /service/qmail-smtpd/log
    qmail-qstat
    ;;
  doqueue|alrm|flush)
    echo "Flushing timeout table and sending ALRM signal to qmail-send."
    /var/qmail/bin/qmail-tcpok
    svc -a /service/qmail-send
    ;;
  queue)
    qmail-qstat
    qmail-qread
    ;;
  reload|hup)
    echo "Sending HUP signal to qmail-send."
    svc -h /service/qmail-send
    ;;
  pause)
    echo "Pausing qmail-send"
    svc -p /service/qmail-send
    echo "Pausing qmail-smtpd"
    svc -p /service/qmail-smtpd
    ;;
  cont)
    echo "Continuing qmail-send"
    svc -c /service/qmail-send
    echo "Continuing qmail-smtpd"
    svc -c /service/qmail-smtpd
    ;;
  restart)
    echo "Restarting qmail:"
    echo "* Stopping qmail-smtpd."
    svc -d /service/qmail-smtpd /service/qmail-smtpd/log
    echo "* Sending qmail-send SIGTERM and restarting."
    svc -t /service/qmail-send /service/qmail-send/log
    echo "* Restarting qmail-smtpd."
    svc -u /service/qmail-smtpd /service/qmail-smtpd/log
    ;;
  cdb)
    tcprules /etc/tcp.smtp.cdb /etc/tcp.smtp.tmp < /etc/tcp.smtp
    chmod 644 /etc/tcp.smtp.cdb
    echo "Reloaded /etc/tcp.smtp."
    ;;
  help)
    cat <<HELP
   stop -- stops mail service (smtp connections refused, nothing goes out)
  start -- starts mail service (smtp connection accepted, mail can go out)
  pause -- temporarily stops mail service (connections accepted, nothing leaves)
   cont -- continues paused mail service
   stat -- displays status of mail service
    cdb -- rebuild the tcpserver cdb file for smtp
restart -- stops and restarts smtp, sends qmail-send a TERM & restarts it
doqueue -- schedules queued messages for immediate delivery
 reload -- sends qmail-send HUP, rereading locals and virtualdomains
  queue -- shows status of queue
   alrm -- same as doqueue
  flush -- same as doqueue
    hup -- same as reload
HELP
    ;;
  *)
    echo "Usage: $0 {start|stop|restart|doqueue|flush|reload|stat|pause|cont|cdb|queue|help}"
    exit 1
    ;;
esac

exit 0


This script is available via
L<http://lifewithqmail.org/qmailctl-script-dt70>.

Create the script using your editor or by downloading it with your web
browser (recommended).

Make the F<qmailctl> script executable and link it to a directory in
your path:

    chmod 755 /var/qmail/bin/qmailctl
    ln -s /var/qmail/bin/qmailctl /usr/bin

The F<supervise> scripts

Now create the F<supervise> directories for the I<qmail> services:

    mkdir -p /var/qmail/supervise/qmail-send/log
    mkdir -p /var/qmail/supervise/qmail-smtpd/log

Create the F</var/qmail/supervise/qmail-send/run> file:

 #!/bin/sh
exec /var/qmail/rc

Create the F</var/qmail/supervise/qmail-send/log/run> file:

 #!/bin/sh
exec /usr/local/bin/setuidgid qmaill /usr/local/bin/multilog t /var/log/qmail

Create the F</var/qmail/supervise/qmail-smtpd/run> file:

 #!/bin/sh

QMAILDUID=`id -u qmaild`
NOFILESGID=`id -g qmaild`
MAXSMTPD=`cat /var/qmail/control/concurrencyincoming`
LOCAL=`head -1 /var/qmail/control/me`

if [ -z "$QMAILDUID" -o -z "$NOFILESGID" -o -z "$MAXSMTPD" -o -z "$LOCAL" ]; then
    echo QMAILDUID, NOFILESGID, MAXSMTPD, or LOCAL is unset in
    echo /var/qmail/supervise/qmail-smtpd/run
    exit 1
fi

if [ ! -f /var/qmail/control/rcpthosts ]; then
    echo "No /var/qmail/control/rcpthosts!"
    echo "Refusing to start SMTP listener because it'll create an open relay"
    exit 1
fi

exec /usr/local/bin/softlimit -m 2000000 \
    /usr/local/bin/tcpserver -v -R -l "$LOCAL" -x /etc/tcp.smtp.cdb -c "$MAXSMTPD" \
        -u "$QMAILDUID" -g "$NOFILESGID" 0 smtp /var/qmail/bin/qmail-smtpd 2>&1

B<Note: >F<concurrencyincoming> isn't a standard qmail control file.
It's a feature of the above script. Also, that's F<-1> (dash one) on
the F<LOCAL> line and F<-l> (dash ell) on the F<tcpserver> line.

B<Note: >Under Solaris, the normal F<id> program won't work right in
this script. Instead of F<id>, use F</usr/xpg4/bin/id>, e.g.:

    QMAILDUID=`/usr/xpg4/bin/id -u qmaild`
    NOFILESGID=`/usr/xpg4/bin/id -g qmaild`



B<Note: >The memory limit specified in the F<softlimit> command may
need to be raised depending upon your operating system and hardware
platform. If attempts to connect to port 25 fail or remote systems are
unable to send you mail, or you see a message like:

  /usr/local/bin/tcpserver: error while loading shared libraries:
  libc.so.6: failed to map segment from shared object: Cannot
  allocate memory

try raising it to 3000000 or 4000000.



Create the F<concurrencyincoming> control file:

    echo 20 > /var/qmail/control/concurrencyincoming
    chmod 644 /var/qmail/control/concurrencyincoming

Create the F</var/qmail/supervise/qmail-smtpd/log/run> file:

 #!/bin/sh
exec /usr/local/bin/setuidgid qmaill /usr/local/bin/multilog t /var/log/qmail/smtpd

Make the run files executable:

    chmod 755 /var/qmail/supervise/qmail-send/run
    chmod 755 /var/qmail/supervise/qmail-send/log/run
    chmod 755 /var/qmail/supervise/qmail-smtpd/run
    chmod 755 /var/qmail/supervise/qmail-smtpd/log/run

Then set up the log directories:

    mkdir -p /var/log/qmail/smtpd
    chown qmaill /var/log/qmail /var/log/qmail/smtpd

Finally, link the F<supervise> directories into F</service>:

    ln -s /var/qmail/supervise/qmail-send /var/qmail/supervise/qmail-smtpd /service

The F</service> directory is created when I<daemontools> is installed.

B<Note: >The I<qmail> system will start automatically shortly after
these links are created. If you don't want it running yet, do:

    qmailctl stop



SMTP Access Control

Allow the local host to inject mail via SMTP:

    echo '127.:allow,RELAYCLIENT=""' >>/etc/tcp.smtp
    qmailctl cdb

Stop and disable the installed MTA

Although it's possible to run both I<qmail> and your existing MTA,
which is probably I<Sendmail>, simultaneously, I don't recommend it
unless you know what you're doing. And, frankly, if you're reading
this, you probably don't know what you're doing. :-)

If your existing MTA is I<Sendmail>, you should be able to stop it by
running the F<init.d> script with the "stop" argument. E.g., one of
these should work:

    /etc/init.d/sendmail stop
    /sbin/init.d/sendmail stop
    /etc/rc.d/init.d/sendmail stop

If you can't find an F<init.d/sendmail> script, you can locate
F<sendmail>'s PID using "F<ps -ef|grep sendmail>" or "F<ps waux|grep
sendmail>" and stop it using:

    kill PID-of-sendmail

If your MTA isn't I<Sendmail>, check its documentation for the correct
shutdown procedure.

You should also consider removing the old MTA completely from the
system. At least disable the F<init.d> script so it doesn't try to
start up again when the system is rebooted.

For Red Hat Linux, removing I<Sendmail> can be accomplished by:

    rpm -e --nodeps sendmail

B<Note: >If you're using an RPM-based Linux distribution like Red Hat,
removing the MTA package might cause problems down the road. Utilities
that update the system might try to reinstall Sendmail, or MUA
packages might not install because they can't tell an MTA is
installed. Mate Wierdl provides a stub package called "fake_mta" that
can be installed to prevent these problems. Simply install the RPM
available from L<ftp://ftp.csi.hu/mw/fake_mta-1-10memphis.noarch.rpm
>.



Verify that nothing is listening to the SMTP port (25). Culprits could
be the old MTA, F<inetd>, or F<xinetd>. The following command should
produce no output (unless the qmail-smtpd service is running):

    netstat -a | grep smtp

If something is running, make sure it's not I<qmail> by doing:

    qmailctl stop

The repeat the F<netstat> check:

    netstat -a | grep smtp

If you still get output from that command you'll have to locate the
culprit and fix it before I<qmail>'s SMTP service will run.

Lastly, replace any existing F</usr/lib/sendmail> with the I<qmail>
version:

    mv /usr/lib/sendmail /usr/lib/sendmail.old                  # ignore errors
    mv /usr/sbin/sendmail /usr/sbin/sendmail.old                # ignore errors
    chmod 0 /usr/lib/sendmail.old /usr/sbin/sendmail.old        # ignore errors
    ln -s /var/qmail/bin/sendmail /usr/lib
    ln -s /var/qmail/bin/sendmail /usr/sbin

B<Note: >It's important to create the F<sendmail> links, regardless of
the previous MTA, if any. The F<sendmail> command is invoked by many
applications for sending mail.

The last step is to create a couple of system aliases.

Create System Aliases

There are three system aliases that should be created on all I<qmail>
installations:

 Alias                             Purpose
 postmaster                        RFC 2821 required, points to the mail adminstrator (you)
 mailer-daemon                     de facto standard recipient for some bounces
 root                              redirects mail from privileged account to the system administrator
 abuse                             de facto standard recipient for abuse complaints

To create these aliases, decide where you want each of them to go (a
local user or a remote address) and create and populate the
appropriate F<.qmail> files. For example, say local user F<dave> is
both the system and mail administrator:

    echo dave > /var/qmail/alias/.qmail-root
    echo dave > /var/qmail/alias/.qmail-postmaster
    ln -s .qmail-postmaster /var/qmail/alias/.qmail-mailer-daemon
    ln -s .qmail-postmaster /var/qmail/alias/.qmail-abuse
    chmod 644 /var/qmail/alias/.qmail-root /var/qmail/alias/.qmail-postmaster

See F<INSTALL.alias> for more details.

Start I<qmail>

If you stopped I<qmail> above after creating the links in F</service>,
you should restart it now:

    qmailctl start

=head2 Test the Installation

I<qmail> should now be running. First run F<qmailctl stat> to verify
that the services are up and running:

    # qmailctl stat
    /service/qmail-send: up (pid 30303) 187 seconds
    /service/qmail-send/log: up (pid 30304) 187 seconds
    /service/qmail-smtpd: up (pid 30305) 187 seconds
    /service/qmail-smtpd/log: up (pid 30308) 187 seconds
    messages in queue: 0
    messages in queue but not yet preprocessed: 0

All four services should be "up" for more than a second. If they're
not, you've probably got a typo in the associated run script or you
skipped one or more steps in creating the necessary files,
directories, or links. Go back through the installation step-by-step
and double check your work. You can also download and run the
F<inst_check> script, available from
L<http://lifewithqmail.org/inst_check>. For example:

    # sh inst_check
    ! /var/log/qmail has wrong owner, should be qmaill
    ...try: chown qmaill /var/log/qmail
    #

If F<inst_check> finds problems, fix them and re-run it. When
everything looks right, F<inst_check> will report:

    Congratulations, your LWQ installation looks good!

The F<readproctitle> program keeps a log of error messages generated
by services managed by svscan. To see these messages, use F<ps> or
some other process listing command. For example, you might see
something like:

    # ps -efl | grep "service errors" | grep -v grep
    000 S root      1006  1001  0  76   0    -   334 pipe_w Mar31 ?        00:00:00
    readproctitle service errors: ...unable to start qmail-smtpd/run: exec format error
    #

In this case, the problem is that there is an error in the first line
of the F</service/qmail-smtpd/run> script--most likely caused by the
file being is DOS format (CR-LF line endings instead of Unix's
LF-only).

It sometimes helps to run a service manually in order to find
configuration problems. For example, if your F<qmail-smtpd/log>
service isn't running, do:

    cd /service/qmail-smtpd/log
    svc -d .
    ./run
    if no errors, enter a line of text and press ENTER
    if still no errors, enter CTRL-D (end of file)

At this point, you should be able to identify the problem and fix it.
Once that's done, return to the service's directory, if necessary, and
do:

    svc -u .

Once the services are all up with >1 second uptime, follow the
instructions in F<TEST.deliver> and F<TEST.receive> to verify that
they're working correctly. Note that using these instructions, logging
will be accomplished by F<multilog> to F</var/log/qmail>, not
F<splogger> to something like F</var/log/maillog>.

B<Note: >If you chose maildir mailbox format as the default delivery
method, you will need to create a F<Maildir> directory in your home
directory and F<alias>'s home directory before trying these
instructions. See the I<maildir> section to see how to properly create
this directory.



=head1 Configuration

You've got I<qmail> installed, from the recommended source tarball
method, one of the self-compiling packages, or a var-qmail package.
This section contains information you will need to configure I<qmail>
to make it work the way you want it to.

=head2 Configuration Files

All of I<qmail>'s system configuration files, with the exception of
the F<.qmail> files in F<~alias>, reside in F</var/qmail/control>. The
F<qmail-control> man page contains a table like the following:

 Control          Default          Used by           Purpose
 badmailfrom      none             qmail-smtpd       blacklisted From addresses
 bouncefrom       MAILER-DAEMON    qmail-send        username of bounce sender
 bouncehost       me               qmail-send        hostname of bounce sender
 concurrencyincomingnone           /service/qmail-smtpd/runmax simultaneous incoming SMTP connections
 concurrencylocal 10               qmail-send        max simultaneous local deliveries
 concurrencyremote20               qmail-send        max simultaneous remote deliveries
 defaultdelivery  none             /var/qmail/rc     default .qmail file
 defaultdomain    me               qmail-inject      default domain name
 defaulthost      me               qmail-inject      default host name
 databytes        0                qmail-smtpd       max number of bytes in message (0=no limit)
 doublebouncehost me               qmail-send        host name of double bounce sender
 doublebounceto   postmaster       qmail-send        user to receive double bounces
 envnoathost      me               qmail-send        default domain for addresses without "@"
 helohost         me               qmail-remote      host name used in SMTP HELO command
 idhost           me               qmail-inject      host name for Message-ID's
 localiphost      me               qmail-smtpd       name substituted for local IP address
 locals           me               qmail-send        domains that we deliver locally
 me               FQDN of system   various           default for many control files
 morercpthosts    none             qmail-smtpd       secondary rcpthosts database
 percenthack      none             qmail-send        domains that can use "%"-style relaying
 plusdomain       me               qmail-inject      domain substituted for trailing "+"
 qmqpservers      none             qmail-qmqpc       IP addresses of QMQP servers
 queuelifetime    604800           qmail-send        seconds a message can remain in queue
 rcpthosts        none             qmail-smtpd       domains that we accept mail for
 smtpgreeting     me               qmail-smtpd       SMTP greeting message
 smtproutes       none             qmail-remote      artificial SMTP routes
 timeoutconnect   60               qmail-remote      how long, in seconds, to wait for SMTP connection
 timeoutremote    1200             qmail-remote      how long, in seconds, to wait for remote server
 timeoutsmtpd     1200             qmail-smtpd       how long, in seconds, to wait for SMTP client
 virtualdomains   none             qmail-send        virtual domains and users

For more information about a particular control file, see the man page
for the module listed under "Used by".

=head2 Relaying

Introduction

What is I<relaying>? It's when an MTA accepts a message via SMTP that
doesn't I<appear> to be either B<for> a local address or B<from> a
local sender.

In the pre-spam days, it was common for MTA's to be configured as
I<open> relays: promiscuous servers that would accept mail from
anyone, for anyone.

Most MTA's now are configured to either completely disable relaying,
or to only a allow certain trusted users or systems to use them as a
relay.

Chris Johnson has written a very nice document on the topic for
I<qmail> users. I encourage you to visit
L<http://www.palomine.net/qmail/relaying.html>.

Disabling relaying

If you follow the official directions for installing I<qmail>,
relaying will be turned off by default. This is accomplished by
populating the file F</var/qmail/control/rcpthosts> with the
fully-qualified domain names listed in F<locals> and F<virtualdomains>
(the local hosts). The name of the control file, F<rcpthosts>, comes
from the SMTP F<RCPT> (recipient) command. In an SMTP session, RCPT is
used to specify the addresses of the recipients of a message.
F<rcpthosts>, then, lists the valid hostnames that can appear in a
RCPT address.

Allowing selective relaying

Most single-user and small workgroup servers can disable relaying
completely, but if you have to support a distributed user community,
you'll need a way to allow your users, and I<only> your users, to use
your system as a relay. This is accomplished by using I<tcpserver> to
set the F<RELAYCLIENT> environment variable, which tells
F<qmail-smtpd> to override the F<rcpthosts> file.

If you follow the installation instructions in this document,
selective relaying will be enabled by default. To give a client relay
access, add an entry to F</etc/tcp.smtp> like:

    IP address of client:allow,RELAYCLIENT=""

Then rebuild the SMTP access database by doing:

    qmailctl cdb

or:

    tcprules /etc/tcp.smtp.cdb /etc/tcp.smtp.tmp < /etc/tcp.smtp
    chmod 644 /etc/tcp.smtp*

If you followed the official installation instructions, Chris Johnson
has written another very nice document on how to configure I<qmail> to
allow selected hosts to relay. See
L<http://www.palomine.net/qmail/selectiverelay.html>.

Relaying to a smart host

For anyone setting up a mail server on a typical home broadband
service, there is a good chance that your IP address will get
blacklisted by organizations like SORBS
(L<http://www.dnsbl.sorbs.net/lookup.shtml>) in an effort to block
spam. Most ISPs provide an SMTP server that will relay all mail from
their customers, and such servers are usually not blacklisted. For
example, the Road Runner service in Cincinnati, Ohio, has
F<smtp-server.cinci.rr.com> available to their customers. You can tell
qmail to route all outgoing SMTP traffic through that server by doing:

  echo ":smtp-server.cinci.rr.com" > /var/qmail/control/smtproutes

The F<smtproutes> file can perform more routing functions than this;
see the F<qmail-remote> man page for more details.

=head2 Multiple host names

If your system is known by more than one name, e.g., all addresses of
the form F<I<user>@host1.example.com> can also be written as
F<I<user>@example.com> or F<I<user>@mail.example.com>, then you need
to tell I<qmail> this so it'll know which addresses it should deliver
locally and which messages it should accept from remote systems.

To do this, just add all of the names to two control files:

=over 4

=item *

F<rcpthosts>, which tells F<qmail-smtpd> to accept mail addressed to
these hosts, and

=item *

F<locals>, which tells F<qmail-send> that addresses on these hosts are
to be delivered locally.

=back

Send F<qmail-send> a F<HUP> (hangup) signal to tell it to reread
F<locals>. If you have F<qmailctl>, you can do:

    qmailctl reload

=head2 Virtual domains

Virtual domains are similar to the multiple host names discussed in
the previous section, but there are some important differences. First,
if F<example.net> hosts the virtual domain F<virtual.example.com>,
it's generally B<not> true that messages sent to F<joe@example.net>
should end up in the same mailbox as messages sent to
F<joe@virtual.example.com>. The namespace for each virtual domain is
distinct.

With I<qmail>, virtual domains are configured in the F<virtualdomains>
file, which consists of one or more entries of the form:

    user@domain:prepend

I<qmail> converts F<I<user>@I<domain>> to
F<I<prepend>-I<user>@I<domain>> and treats the result as if
F<I<domain>> was local. The F<I<user>@> part is optional. If it's
omitted, the entry matches I<all> F<@I<domain>> addresses.

Returning to the example scenario above, if the example.net mail
administrator wanted to create a virtual domain,
F<virtual.example.com>, under the administrative control of user
F<john>, the following entry in F<virtualdomains> would accomplish
that:

    virtual.example.com:john

An incoming message to F<joe@virtual.example.com> would be rewritten
as F<john-joe@virtual.example.com> and delivered locally. See the
I<.qmail> section, and the I<extension addresses> subsection for more
information about how john can manage his virtual domain.

As with multiple host names, all virtual domains must be listed in
F<rcpthosts> so F<qmail-smtpd> will know to accept messages addressed
to them. However, unlike multiple host names, virtual domains B<must>
B<not> be added to F<locals>.

After modifying F<virtualdomains>, send F<qmail-send> a F<HUP>
(hangup) signal to tell it to reread the file. If you have
F<qmailctl>, you can do:

    qmailctl reload

Don't forget to add virtual domains to F<rcpthosts>, too.

B<Note: >Domain name server (DNS) mail exchanger (MX) records must be
set up to direct messages for virtual domains to the appropriate mail
server. This is a job for the name server administrator and is beyond
the scope of this guide.

=head2 Aliases

I<qmail>'s standard aliasing mechanism is a natural outgrowth of
I<qmail>'s local delivery mechanism. F<qmail-local> attempts to
deliver a message addressed to F<I<localpart>@host> to a local user
named F<I<localpart>>. If no matching user is found, the message is
delivered to the F<alias> user, a pseudo-user on all I<qmail> systems
whose home directory is usually F</var/qmail/alias>.

For example, say you want to create an F<info@example.com> alias that
forwards messages to user F<tom>. On F<example.com>, do, as user
F<root>:

    echo \&tom > /var/qmail/alias/.qmail-info

The F<I<.qmail>> section and I<extension addresses> subsection
describe how to create F<.qmail> files that specify which aliases
exist, and what to do with messages sent to them.

The I<Gotchas> appendix covers a couple of tricky cases regarding the
usage of alias--aliases containing uppercase characters and dots
('.')--and F<man dot-qmail> contains complete documentation of the
usage of F<.qmail> files.

Note that because of the way aliases are implemented in I<qmail>, an
alias can B<never> override a valid user's deliveries. E.g., if
F<rachel> is a normal user, F<~alias/.qmail-rachel> will not be used.

The I<I<fastforward>> package provides an alternative aliasing
mechanism that puts multiple aliases in a single file compatible with
I<Sendmail>'s alias database.

The next section, qmail-users, describes another mechanism that can be
used to implement aliases.

=head2 qmail-users

I<qmail-users> is a system for assigning addresses to users. A series
of configuration files resides under F</var/qmail/users>. The
F<assign> file is a table of assignments. There are two kinds of
assignments: simple and wildcard.

B<Note: >F<assign> contains a series of assignments, one per line,
followed by a line containing a single dot (.). If you create
F<assign> manually, don't forget the dot line.

Simple assignment

A simple assignment looks like:

 =address:user:uid:gid:directory:dash:extension:

What this means is that messages received for I<address> will be
delivered as user I<user>, with the specified I<uid> and I<gid>, and
the file F<I<directory>/.qmailI<dash>I<extension>> will specify how
the messages are to be delivered.

Wildcard assignment

A wildcard assignment looks like:

 +prefix:user:uid:gid:directory:dash:prepend:

What this means is that messages received for addresses of the form
I<prefix>I<rest> will be delivered as user I<user>, with the specified
I<uid> and I<gid>, and the file
F<I<directory>/.qmailI<dash>I<prepend>I<rest>> will specify how the
messages are to be delivered.

qmail-user programs

qmail-user has two helper programs: F<qmail-newu> and F<qmail-pw2u>.

F<qmail-newu> processes the F<assign> file and generates a constant
database (CDB) file called F<cdb> in F</var/qmail/users>. CDB is a
binary format that can be accessed quickly by F<qmail-lspawn>, even
when there are thousands of assignments.

F<qmail-pw2u> converts the system user database, F</etc/passwd>, into
a series of assignments suitable for F<assign>. F<qmail-pw2u> uses a
set of files to modify the translation rules.

=over 4

=item *

F<include>: users to include

=item *

F<exclude>: users to exclude

=item *

F<mailnames>: alternative "mailnames" for users

=item *

F<subusers>: extra addresses handled by a user, with an optional
F<.qmail> extension

=item *

F<append>: miscellaneous assignments

=back

B<Note: >If you use F<qmail-pw2u>, don't forget to re-run
F<qmail-pw2u> and F<qmail-newu> whenever you add users, remove users,
or change UID's or GID's. A typical sequence would be:

    qmail-pw2u </etc/passwd >/var/qmail/users/assign
    qmail-newu



=head2 Spam Control

Chris Hardie has written an excellent I<qmail> Anti-Spam HOWTO. It's
available from
L<http://www.summersault.com/chris/techno/qmail/qmail-antispam.html>.

=head2 Virus Scanning

Jason Haar has written Qmail-Scanner, a content scanning harness for
I<qmail>. See L<http://qmail-scanner.sourceforge.net/> for more
information.

Qmail-Scanner includes a simple "policy-blocking" component (e.g.
block *.scr, or block "Subject: Yellow!") as well as directly
supporting many different antivirus "plugins" including the ClamAV
Antivirus scanner available from L<http://www.ClamAV.net>.

=head1 Usage

This section covers the usage of I<qmail> by normal users. If you read
or send mail on a I<qmail> system, this is where you'll find
information about how to do that with I<qmail>.

=head2 F<.qmail> files

Delivery of a user's mail is usually controlled by one or more
".qmail" (pronounced I<dot kyoo mail>) files--files in the user's home
directory with names beginning with F<.qmail>. The F<dot-qmail> man
page describes F<.qmail> file usage.

F<.qmail> files contain a list of delivery instructions, one
instruction per line. The first character of the line determines what
kind of delivery is involved:

 Character             Delivery Type           Value
 doubledagger          none (comment)          ignored
 |                     program                 command to be run by shell
 / or .                mbox (if last char isn't a /)pathname of mbox (including the / or .)
 / or .                maildir (if last char is a /)pathname of maildir (including the / or .)
 &                     forward                 address to forward message
 letter or number      forward                 address to forward message (including the first char)

program delivery

When a program delivery instruction is encountered, I<qmail> starts a
shell (F</bin/sh>) to execute the command and feeds the command a copy
of the incoming message on standard input. The F<qmail-command> man
page documents the details of this process.

Program delivery is very powerful, and can be used to implement a wide
range of functionality such as message filtering, automatically
responding to messages, and delivery via third-party delivery agents
such as I<procmail>.

E.g.:

    |preline /usr/ucb/vacation djb

This causes I<qmail> to start F<preline>, pass it F</usr/ucb/vacation>
and F<djb> as arguments, and provide a copy of the message on standard
input.

mbox delivery

Mbox is the standard UNIX mailbox format in which multiple messages
are stored in a single file and messages are headed with a "F<From >"
line. This line looks like a header field, but it isn't one: it's just
something the delivery agent adds so mail readers can tell where each
message begins.

E.g.:

    ./Mailbox

This causes messages to be appended to F<$HOME/Mailbox>, with a
"F<From >" line prepended. A simple mbox mailbox with a single message
looks like:

    From user1@example.net Thu May 13 18:34:50 1999
    Received: (qmail 1287205 invoked from network); 13 May 1999 18:34:49 -0000
    From: user1@example.net
    To: user2@example.com
    Subject: hey

    What's up?

The first line was added at delivery by I<qmail>.

maildir delivery

Maildir is a mailbox format created by Dan Bernstein to address the
shortcomings of the mbox format. A maildir mailbox is a directory
containing three subdirectories, F<new>, F<cur>, and F<tmp>. Each
message in a maildir mailbox is in a separate file in one of the
subdirectories, depending upon its status: F<new> is for unread
messages, F<cur> is for messages that have been seen, and F<tmp> is
for messages in the process of being delivered. The F<maildir> man
page describes the format of a maildir in detail.

One of the benefits of the maildir format is that, even though it
doesn't use locking to prevent simultaneous updates from different
delivery agents, it's reliable. This means maildir mailboxes can
safely reside on NFS-mounted filesystems.

E.g.:

    ./Maildir/

This causes messages to be saved in F<$HOME/Maildir>, a maildir-format
mailbox.

B<Note: >F<qmail-local> can deliver mail to maildir mailboxes, but it
can't create them. Maildir mailboxes should be created with the
F<maildirmake> program that comes with I<qmail>. E.g., "F<maildirmake
~/Maildir>". Be sure to run F<maildirmake> as the owner of the
maildir, B<not> as root. Your F<useradd> or F<adduser> command might
support a "skeleton" directory, e.g. F</etc/skel>, where you can
create a maildir that will be copied for all new users.

forward delivery

Forward deliveries causes the message to be resent to the specified
address. Addresses specified in F<.qmail> files can't contain comment
fields or extra spaces.

These are B<wrong>:

    &<user@example.com>
    & user@example.com
    &Joe User <user@example.com>

These are correct:

    &user@example.com
    user@example.com
    &user

The first two cause F<user@example.com> to receive a copy of the
message. The last sends a copy to the local user F<user>.

extension addresses

I<qmail> supports user-controlled extension addresses. In addition to
the base address, F<I<username>@I<hostname>.I<domain>>, users can
receive mail at F<I<username>-I<extension>@I<hostname>.I<domain>>. For
the remainder of this section, I'll leave off the
"@I<hostname>.I<domain>" part since we're considering actions that
take place on the local system.

The delivery instructions for F<I<username>> are in
F<~I<username>/.qmail> and the delivery instructions for
F<I<username>-I<extension>> are in
F<~I<username>/.qmail-I<extension>>.

For example, F<dave-lwq@sparge.example.com> is controlled by
F<~dave/.qmail-lwq> on host sparge.

Extensions can have multiple fields, e.g., F<dave-list-qmail>,
controlled by F<~dave/.qmail-list-qmail>. In this example,
F<dave-list-qmail> is subscribed to the qmail mailing list, and
F<~dave/.qmail-list-qmail> files the list messages in a separate
mailbox.

F<.qmail> files can be I<wildcarded> using F<-default>. So
F<dave-list-qmail> could also be handled by
F<~dave/.qmail-list-default>. This would allow one catch-all F<.qmail>
file to handle all F<dave-list-I<whatever>> addresses. Note that
F<dave-list> wouldn't be handled by F<~dave/.qmail-list-default>
because it doesn't match the "-" after "list".

I<qmail> uses the closest match it finds. E.g., when a message comes
in addressed to F<dave-list-qmail>, it'll use the first one of the
following that it finds:

    .qmail-list-qmail
    .qmail-list-default
    .qmail-default

If no matching F<.qmail> file is found, the delivery fails and the
message bounces back to the sender.

=head2 Sending messages

Mail users usually don't use the MTA directly to send messages.
Typically, messages are composed and sent using a Mail User Agent
(MUA) such as I<pine> or I<mutt>, which then calls the MTA to deliver
the message. The process of handing a message to the MTA is called
I<injection>.

There are two ways to inject messages into most MTA's: via the Simple
Mail Transfer Protocol, SMTP, or using a program provided by the MTA
for that purpose.

SMTP

MUA's can open a TCP connection to port 25, the standard SMTP port, on
the local host or a designated mail server. The MUA and the MTA then
engage in a dialogue that results in either:

=over 4

=item *

the message being transfered to the MTA, or

=item *

a error status being returned to the MUA

=back

SMTP has no mechanism for authentication, so no username or password
is required to send a message. However, many MTA's refuse to accept
messages that don't appear to be either from or for a local user. If a
properly formatted message is rejected, relaying restrictions are the
most likely cause. See the I<Relaying section> for more information
about relay configuration.

F</var/qmail/bin/sendmail>

For many years, I<Sendmail> was I<the> UNIX MTA. It was so ubiquitous,
that many programmers just assumed that it was the MTA. As a result,
I<Sendmail>'s local injection mechanism became the standard
Application Programmer's Interface (API) for local mail injection.
I<qmail> and other non-I<Sendmail> MTA's provide a F<sendmail> program
that works the same way as the real I<Sendmail>'s F<sendmail> for
local injection.

The I<qmail> F<sendmail>, which is normally in
F</var/qmail/bin/sendmail>, usually replaces the I<Sendmail>
F<sendmail> on I<qmail> systems. Typical locations of the F<sendmail>
program include:

=over 4

=item *

F</usr/lib/sendmail>

=item *

F</usr/sbin/sendmail>

=back

On a I<qmail> system, "F<ls -l I<path-to-sendmail>>" should show that
F<sendmail> is a symbolic link to F</var/qmail/bin/sendmail>:

  $ ls -l /usr/lib/sendmail
  lrwxrwxrwx   1 root     root           29 Feb 19 11:04 /usr/lib/sendmail -> /var/qmail/bin/sendmail

F<qmail-inject>

In addition to emulating the F<sendmail> API, I<qmail> has its own
injection program: F<qmail-inject>. In fact, F<sendmail> is just a
wrapper around F<qmail-inject>.

As an API, F<sendmail> is probably better because it's much more
widely available. The I<qmail> API provided by F<qmail-inject> will
only work on systems with I<qmail>, but the F<sendmail> interface is
nearly universal.

For example, to send a blank message to F<joe@example.com>:

 echo To: joe@example.com | /var/qmail/bin/qmail-inject

=head2 Environment Variables

Some I<qmail> programs set or use environment variables. The following
table lists these variables and describes their use.

 Name             Man page         Set or used       Purpose
 DATABYTES        qmail-smtpd      used              Overrides control/databytes
 DEFAULT          qmail-command    set               Portion of address matching "-default" in a .qmail file name.
 DTLINE           qmail-command    set               Delivered-To header field
 EXT              qmail-command    set               The address extension
 EXT2             qmail-command    set               Portion of EXT following first dash
 EXT3             qmail-command    set               Portion of EXT following second dash
 EXT4             qmail-command    set               Portion of EXT following third dash
 HOME             qmail-command    set               The user's home directory
 HOST             qmail-command    set               The domain part of the recipient address
 HOST2            qmail-command    set               Portion of HOST preceding last dot.
 HOST3            qmail-command    set               Portion of HOST preceding second-to-last dot
 HOST4            qmail-command    set               Portion of HOST preceding third-to-last dot
 LOCAL            qmail-command    set               The local part of the recipient address
 LOGNAME          qmail-inject     used              User name in From header field (4)
 MAILHOST         qmail-inject     used              Host name in From header field (2)
 MAILNAME         qmail-inject     used              Personal name in From header field (2)
 MAILUSER         qmail-inject     used              User name in From header field (2)
 NAME             qmail-inject     used              Personal name in From header field (3)
 NEWSENDER        qmail-command    set               Forwarding sender address (see "man dot-qmail")
 QMAILDEFAULTDOMAINqmail-inject    used              Overrides control/defaultdomain
 QMAILDEFAULTHOST qmail-inject     used              Overrides control/defaulthost
 QMAILHOST        qmail-inject     used              Host name in From header field (1)
 QMAILIDHOST      qmail-inject     used              Overrides control/idhost
 QMAILINJECT      qmail-inject     used              Specify various options (see next table)
 QMAILMFTFILE     qmail-inject     used              File containing list of mailing list addresses for Mail-Followup-To generation
 QMAILNAME        qmail-inject     used              Personal name in From header field (1)
 QMAILPLUSDOMAIN  qmail-inject     used              Overrides control/plusdomain
 QMAILSHOST       qmail-inject     used              Host name in envelope sender address
 QMAILSUSER       qmail-inject     used              User name in envelope sender address
 QMAILUSER        qmail-inject     used              User name in From header field (1)
 RECIPIENT        qmail-command    set               Envelope recipient address
 RELAYCLIENT      qmail-smtpd      used              Ignore control/rcpthosts and append value to recipient address
 RPLINE           qmail-command    set               Return-Path header field
 SENDER           qmail-command    set               Envelope sender address
 UFLINE           qmail-command    set               UUCP-style "From " line
 USER             qmail-command    set               The current user
 USER             qmail-inject     used              User name in From header field (3)

I<QMAILINJECT Flags>

 Letter                            Purpose
 c                                 Use address-comment style for the From field
 s                                 Do not look at any incoming Return-Path field
 f                                 Delete any incoming From field
 i                                 Delete any incoming Message-ID field
 r                                 Use a per-recipient VERP
 m                                 Use a per-message VERP

=head1 Advanced Topics

=head2 I<procmail>

I<procmail> is a popular Message Delivery Agent (MDA). The function of
an MDA is to accept a message from the MTA for a specific user or
mailbox, and deliver the message according to the user's desires.
I<procmail> can be used to "filter" messages by the content of various
header fields or the body of the message. For example, messages from a
particular person can be directed to a mailbox for just that person.

There are a couple tricks to running I<procmail> with I<qmail>. First,
procmail is usually built to deliver to an mbox mailbox in
F</var/spool/mail>. You can rebuild I<procmail> to default to F<$HOME>
or you can instruct users not to rely on I<procmail> to default the
location of the mbox. Unless you patch it for F<$HOME> delivery,
F<procmail> will still use F</var/spool/mail> for temporary files.

Another problem is that F<qmail-command> and F<procmail> don't have a
common understanding of which exit codes mean what. F<procmail> uses
the standard UNIX exit codes: zero means I<success>, nonzero means
I<failure>, and the cause of the failure is indicated by
F</usr/include/sys/errno.h>. F<qmail-command> uses certain nonzero
codes to indicate permanent errors and the rest are considered
temporary. A small shell script wrapper can be used to translate the
exit codes for F<qmail-command>. Such a wrapper was posted to the
I<qmail> list and is available from the archives at
L<http://www.ornl.gov/lists/mailing-lists/qmail/1998/04/msg00487.html>.

Also, older versions of I<procmail> (prior to 3.14) don't deliver
directly to maildir-format mailboxes. Your best bet is to upgrade to
the current version of I<procmail>. Another approach is I<safecat>, a
program that writes a message on standard input to a specified
maildir. Users can write I<procmail> recipes (delivery instructions)
that use I<I<safecat>> to file the message. You can also skip
I<procmail> altogether, and use I<I<maildrop>>.

Finally, F<procmail> expects the messages it receives to be in mbox
format. Normal I<qmail> program deliveries include only the actual
mail message, not including a "F<From >" line. The F<preline> command
can be used to format the message as F<procmail> expects. The wrapper
linked above includes F<preline>.

For example, let's say user "dave" wants his mail to be processed by
F<procmail>. His system administrator has built F<procmail> to deliver
to F<$HOME> by default, and has provided the exit code wrapper linked
above, called F</usr/local/bin/qmail-procmail>. His F<.qmail> file
should look like:

    |/usr/local/bin/qmail-procmail

=head2 POP and IMAP servers

I<qmail> includes a POP server, I<qmail-pop3d>, but it's not
configured and installed as part of the I<qmail> installation process.
You can also use one of the other POP or IMAP servers available,
although most of them were written for I<Sendmail> and will require
some work to use with I<qmail>.

I<qmail-pop3d>

I<qmail-pop3d> is the POP server included with I<qmail>. It's a fine
POP server, and many I<qmail> sites use it. It's modular, and supports
multiple authentication schemes via alternative authentication
modules.

B<Note: >I<qmail-pop3d> supports B<only> maildir-format mailboxes, so
if you have users logging into the POP server and running MUA's
locally, they all have to support maildir. If all of your users read
mail via POP, the mailbox format on the server is not an issue.

Architecture of I<qmail-pop3d>

A I<qmail-pop3d> server consists of three modules:

=over 4

=item *

F<qmail-popup>--gets username/password

=item *

F<checkpassword>--authenticates username/password

=item *

F<qmail-pop3d>--the POP daemon

=back

Typically, F<qmail-popup> is run via F<inetd> or F<tcpserver>,
listening to port 110, the POP3 port. When a connection is made, it
prompts for the username and password. Then it invokes
F<checkpassword>, which verifies the username/password and invokes
F<qmail-pop3d> if they match.

Installation of I<qmail-pop3d>

1. Completely install and test I<qmail>. If you want all users to have
POPable mailboxes, make sure I<defaultdelivery> is set to
F<./Maildir/>. If you installed the F</var/qmail/rc> script from the
Installation section, this is configured in
F<control/defaultdelivery>. If not, it's probably in F</var/qmail/rc>
on the F<qmail-start> command line.

2. Download a F<checkpassword> program from
L<http://www.qmail.org/top.html#checkpassword>. The standard
F<checkpassword>, L<http://cr.yp.to/checkpwd.html>, is a good choice
if you don't need anything fancy.

3. Compile and install F<checkpassword> according to the directions.
Make sure you install it as F</bin/checkpassword>.

B<Note: >If you install the standard F<checkpassword>, don't forget to
apply the F<errno> patch after unpacking the source:

 patch < /usr/local/src/netqmail-1.06/other-patches/checkpassword-0.90.errno.patch



4. F<mkdir /var/qmail/supervise/qmail-pop3d>

5. Create a F</var/qmail/supervise/qmail-pop3d/run> script containing:

 #!/bin/sh
exec /usr/local/bin/softlimit -m 2000000 \
    /usr/local/bin/tcpserver -v -R -H -l 0 0 110 /var/qmail/bin/qmail-popup \
        FQDN /bin/checkpassword /var/qmail/bin/qmail-pop3d Maildir 2>&1

where I<FQDN> is the fully qualified domain name of the POP server
you're setting up, e.g., F<pop.example.net>.

B<Note: >The memory limit specified in the F<softlimit> command may
need to be raised depending upon your operating system and hardware
platform. If attempts to connect to port 110 fail or POP3 connections
fail mysteriously, or you see a message like:

  /usr/local/bin/tcpserver: error while loading shared libraries:
  libc.so.6: failed to map segment from shared object: Cannot
  allocate memory

try raising it to 3000000 or 5000000.



6. F<mkdir /var/qmail/supervise/qmail-pop3d/log>

7. Create a F</var/qmail/supervise/qmail-pop3d/log/run> script
containing:

 #!/bin/sh
exec /usr/local/bin/setuidgid qmaill /usr/local/bin/multilog t \
    /var/log/qmail/pop3d

8. Set up the log directory and permissions on the F<run> scripts, and
link the service into F</service>:

    chmod +t /var/qmail/supervise/qmail-pop3d   # if daemontools < 0.75
    mkdir /var/log/qmail/pop3d
    chown qmaill /var/log/qmail/pop3d
    chmod 755 /var/qmail/supervise/qmail-pop3d/run
    chmod 755 /var/qmail/supervise/qmail-pop3d/log/run
    ln -s /var/qmail/supervise/qmail-pop3d /service

9. Add the following to F<qmailctl>'s "start" section:

    if svok /service/qmail-pop3d ; then
      svc -u /service/qmail-pop3d /service/qmail-pop3d/log
    else
      echo qmail-pop3d supervise not running
    fi

10. Add the following to F<qmailctl>'s "stop" section:

    echo "  qmail-pop3d"
    svc -d /service/qmail-pop3d /service/qmail-pop3d/log

11. Add the following to F<qmailctl>'s "stat" section:

    svstat /service/qmail-pop3d
    svstat /service/qmail-pop3d/log

12. Add the following to F<qmailctl>'s "pause" section:

    echo "Pausing qmail-pop3d"
    svc -p /service/qmail-pop3d

13. Add the following to F<qmailctl>'s "cont" section:

    echo "Continuing qmail-pop3d"
    svc -c /service/qmail-pop3d

14. Add the following to F<qmailctl>'s "restart" section:

    echo "* Restarting qmail-pop3d."
    svc -t /service/qmail-pop3d /service/qmail-pop3d/log

I<Qpopper>

If you need a POP daemon that works with mbox-format mailboxes, you
can use Qualcomm's I<Qpopper>. I<Qpopper> is available from
L<http://www.eudora.com/products/unsupported/qpopper/>.

I<Binc IMAP>

Andreas Hanssen has written the I<Binc IMAP> server. Binc IMAP is
designed to use the same authentication mechanism (F<checkpassword>)
that F<qmail-pop3d> uses, so it's a good fit for I<qmail> servers.
Like F<qmail-pop3d>, it supports only Maildir mailboxes. See:
L<http://www.bincimap.org/>.

I<Dovecot>

Timo Sirainen has written I<Dovecot>, a IMAP and POP server that
supports both mbox and maildir mailboxes. It was designed to be
secure. It's available from L<http://www.dovecot.org/>.

I<imap-maildir>

David R. Harris has cleaned up the patch that adds maildir support to
the University of Washington IMAP server and documented the
installation process. See L<http://www.davideous.com/imap-maildir/>.

I<Courier-IMAP>

Sam Varshavchik has written an IMAP server that supports maildir
mailboxes B<only>. It's available from
L<http://www.courier-mta.org/imap/>.

I<Cyrus>

Carnegie Mellon University's Project Cyrus includes an IMAP server.
It's available from L<http://asg.web.cmu.edu/cyrus/imapd/>. Rick
Updegrove has written a F<qmail2cyrus> wrapper for delivering messages
to a Cyrus mail store. This wrapper is available from
L<http://msgs.securepoint.com/cgi-bin/get/qmail0308/41/1/1.html>.

=head2 POP and IMAP clients

I<fetchmail>

I<fetchmail> is a program that retrieves mail from a POP or IMAP
server and re-injects it locally. I<fetchmail> has no trouble
retrieving mail from I<qmail> servers, but there are a couple tricks
for making it work well on a I<qmail> client.

Here's a sample F<.fetchmailrc> for a user on a I<qmail> system:

 poll mail.example.net proto pop3 nodns
    user dsill with password flubgart is dave here
    fetchall forcecr

This instructs I<fetchmail> to connect to mail.example.net via POP3,
log in as user F<dsill>, password F<flubgart>, retrieve all messages,
and deliver them to dave@localhost. The F<forcecr> causes I<fetchmail>
to end each line with a carriage return when injecting the message on
the local system via SMTP. I<qmail> requires this.

I<getmail>

I<getmail> is a program that retrieves mail from a POP server and
delivers it to a maildir mailbox. It's actually a Python script, so
you may need to install the Python interpreter before you can use
I<getmail>

I<getmail> was written by Charles Cazabon, who maintains a web page
for it at L<http://pyropus.ca/software/getmail/>.

=head2 Multi-RCPT vs. Single RCPT delivery

Say you're an MTA, and one of your users sends a message to three
people on hostx.example.com. There are several ways you could do this.

=over 4

=item 1.

You could open an SMTP connection to hostx, send a copy of the message
to the first user, send a copy to the second user, send a copy to the
third user, then close the connection.

=item 2.

You could start three processes, each of which opens an SMTP
connection to hostx, sends a copy of the message to one of the users,
then closes the connection.

=item 3.

You could open an SMTP connection to host, send a copy of the message
addressed to I<all three users>, then close the connection.

=back

The first method is clearly inferior to the third. Even if the message
is tiny, it'll take at least as long. And if the message is large,
it'll take a lot longer I<and> use more network bandwidth.

So scratch that one.

The second and third methods are a little more interesting.

The third method only opens one connection to hostx, and only sends
one copy of the message. That makes for efficient use of bandwidth.

The second method uses multiple connections and sends multiple copies
of the message. That "wastes" bandwidth, but due to the nature of the
SMTP protocol, requires fewer round-trip delays, and is faster than
the third method. It's also simpler than the third method, so the MTA
can be coded in a more straightforward manner. And finally, because
each recipient gets their own copy of the message, it's possible for
the MTA to implement VERPs (see next section).

I<qmail> I<always> uses the second method (single RCPT). There are no
patches to implement the third method (multiple RCPT)--it would
require B<major> work.

Although there are pathological cases where it can be slower than
multiple RCPT, the simplicity and VERP advantages outweigh that
overall.

Single RCPT delivery I<does> use more bandwidth than multiple RCPT
delivery, but the difference is often exaggerated. Most messages have,
at most, a couple recipients, and they're usually on separate hosts,
so multi-RCPT delivery buys them nothing. Even on a list server, where
multi-RCPT delivery could help, the potential gains are small because
SMTP uses only a fraction of the bandwidth over most links--HTTP
usually gets the lion's share.

For example, if 10% of your uplink's bandwidth goes to SMTP, and your
SMTP bandwidth could be reduced by, say, 25%, by using multi-RCPT
delivery, that would only drop your SMTP bandwidth to 7.5%.

=head2 VERP

When a message is undeliverable, the MTA responsible is supposed to
return a bounce message to the envelope return path (ERP). The bounce
message should include the address of the recipient, the reason the
message is undeliverable, and whether the problem is temporary or
permanent. Some MTA's don't do the right thing, though. They might
send the bounce to the address in the From header field, or the bounce
might not identify the recipient.

For most user-to-user messages, these problems aren't too bad. One can
usually figure things out based on the timing of the bounce or the
contents. For mailing lists, the problem of bad bounces is more
serious. Subscribers move, forwarding mail to their new address. If
the new address starts having delivery problems, it can be impossible
to tell which subscriber's mail is bouncing if the bounce message only
includes the new address.

Dan Bernstein came up with a solution to this problem called VERP
(Variable Envelope Return Path). Using VERPs, each message sent to
each subscriber to a list has a unique return path. This allows a
bounce handler to identify the problem subscriber.

For example, a typical non-VERP'ed mailing list has a return address
of the form F<I<listname>-owner@I<domain>>. For a VERP'ed list, the
return address would look like
F<I<listname>-owner-B<I<subscriber>=I<sdomain>>@I<ldomain>>, where the
subscriber's address, F<I<subscriber>@I<sdomain>>, is embedded between
the "owner" and the "@". (The "@" in the subscriber's address is
replaced with an "=".)

The I<I<ezmlm>> list manager uses VERPs to automatically handle
bounces. It even provides subscribers with temporary delivery problems
with a list of the messages they missed so they can retrieve them from
the archive.

Russell Nelson wrote a bounce manager for I<Majordomo> under I<qmail>,
but he no longer maintains it. It's available from
L<http://www.qmail.org/bounceman-0.4.shar>.

=head2 Troubleshooting

Processes

A properly-running, complete, but minimal I<qmail> installation should
always have the following four processes:

=over 4

=item *

F<qmail-send> running as user F<qmails>

=item *

F<qmail-clean> running as user F<qmailq>

=item *

F<qmail-rspawn> running as user F<qmailr>

=item *

F<qmail-lspawn> running as user F<root>

=back

Depending upon your flavor of UNIX, one of the following two commands
should list these processes, and possibly a few more:

    ps -ef | grep qmail
    ps waux | grep qmail

For example:

 [dave@sparge dave]$ ps waux|grep qmail
dave      2222  0.0  0.8   836   348  p4 S    10:25   0:00 grep qmail
qmaild     351  0.0  1.0   840   400  ?  S N  12:43   0:00 /usr/local/bin/tcpserver -v -x /etc/tcp.smtp.cdb -u 49491 -g 31314 0 smtp /var/qmail/bin/qmail-smtpd-
qmaild    2220  0.0  1.0   844   420  ?  S N  10:25   0:00 /usr/local/bin/tcpserver -v -x /etc/tcp.smtp.cdb -u 49491 -g 31314 0 smtp /var/qmail/bin/qmail-smtpd-
qmaill     365  0.0  0.8   748   344  ?  S N  12:43   0:00 splogger qmail
qmailq     368  0.0  0.7   736   292  ?  S N  12:43   0:00 qmail-clean
qmailr     367  0.0  0.6   732   272  ?  S N  12:43   0:00 qmail-rspawn
qmails     350  0.0  0.8   776   336  ?  S N  12:43   0:00 qmail-send
root       340  0.0  0.6   724   252  ?  S N  12:43   0:00 /usr/local/sbin/supervise /var/supervise/qmail-send /var/qmail/rc
root       341  0.0  0.6   724   252  ?  S N  12:43   0:00 /usr/local/sbin/supervise /var/supervise/tcpserver-qmail /usr/local/bin/tcpserver -v -x /etc/tcp.smtp
root       366  0.0  0.7   736   276  ?  S N  12:43   0:00 qmail-lspawn ./Mailbox
[dave@sparge dave]$

If you run I<qmail> or F<qmail-smtpd> under F<supervise>, as in the
example above, you should see those processes as well. And if run
F<qmail-smtpd> under F<tcpserver>, you should see a parent
F<tcpserver> process I<plus> an additional F<tcpserver> process for
each active I<incoming> SMTP connection.

If you use F<splogger> (or F<multilog> or F<cyclog>) to handle
logging, you'll have a F<splogger> (or F<multilog> or F<cyclog>)
process or two running as user F<qmaill>.

Also, if I<qmail> is busy delivering messages locally or remotely,
you'll see up to F<concurrencylocal> F<qmail-local> processes and up
to F<concurrencyremote> F<qmail-remote> processes.

Logs

F<multilog>

F<multilog>, which is part of the I<I<daemontools>> package, logs
messages to a series of files in a specified directory.

The log directory is specified on the F<multilog> command line, so you
can find it by examining your I<qmail> startup scripts.

The number of files in the log directory, and the maximum size of each
file, are determined by F<multilog> options. The log file names are
the TAI (Temps Atomique International) timestamps of the time at which
the file was started. The F<tai64nlocal> command, also from
I<daemontools>, converts TAI timestamps into local, human-readable
timestamps.

A typical F<multilog> log entry looks like:

 @4000000038c3eeb104a6ecf4 delivery 153: success: did_1+0+0/

"@4000000038c3eeb104a6ecf4" is the optional, but recommended, TAI
timestamp. "delivery 153: success: did_1+0+0/" is the log message
itself.

F<splogger>

F<splogger> uses the I<syslog> logging system to timestamp messages
and send them to the I<syslog> daemon. I<Syslog> is configured in
F</etc/syslog.conf>. Messages sent to I<syslog> have a I<facility> and
I<priority>. Entries in F</etc/syslog.conf> filter on the facility and
priority to direct the messages to the desired log file, remote log
host, or the console. F<splogger> logs to the F<mail> facility, by
default, so F<grep>'ing the F<syslog.conf> file for "mail" should show
the disposition of I<qmail>'s log messages.

Typical locations include:

=over 4

=item *

F</var/log/syslog>

=item *

F</var/adm/SYSLOG>

=item *

F</var/log/maillog>

=back

A typical I<syslog> log entry looks like:

 Jun  3 11:35:23 sparge qmail: 928424123.963558 delivery 153: success: did_1+0+0/

"Jun  3 11:35:23" is the I<syslog> timestamp.

"sparge" is the name of the system that sent the message.

"qmail:" is the tag F<splogger> places on all I<qmail> log entries.

"928424123.963558" is an optional TAI timestamp (see next section).

"delivery 153: success: did_1+0+0/" is the log message itself.

Log messages

Here's a typical log sequence for a message sent to a remote system
from the local system:

 1 @4000000038c3eeb027f41c7c new msg 93869
2 @4000000038c3eeb027f6b0a4 info msg 93869: bytes 2343 from <dave@sill.org> qp 18695 uid 49491
3 @4000000038c3eeb02877ee94 starting delivery 2392: msg 93869 to remote lwq@w3.to
4 @4000000038c3eeb0287b55ac status: local 0/10 remote 1/20
5 @4000000038c3eeb104a13804 delivery 2392: success: 209.85.127.177_accepted_message.
   /Remote_host_said:_250_CAA01516_Message_accepted_for_delivery/
6 @4000000038c3eeb104a4492c status: local 0/10 remote 0/20
7 @4000000038c3eeb104a6ecf4 end msg 93869

Line 1 indicates that I<qmail> has received a new message, and its
queue ID is 93869. The queue ID is the i-node number of the
F</var/qmail/queue/mess/I<NN>/> file--the queue file that contains the
message. The queue ID is guaranteed to be unique as long as the
message remains in the queue.

Line 2 says that the message is from F<dave@sill.org> and is 2343
bytes.

Line 3 says F<qmail-remote> is starting to deliver the message to
F<lwq@w3.to>, and it's assigning the ID 2392 to the delivery.

Line 4 says 0 local deliveries and 1 remote delivery are pending.

Line 5 says delivery 2392 is complete and successful, and it returns
the remote server's response, which often contains information the
remote mail administrator would find helpful in tracking a delivery.
In this case, the "CAA01516" is the remote system's delivery ID.

Line 6 says 0 local deliveries and 0 remote deliveries are pending,
i.e., the delivery is complete.

Line 7 says that the message has been delivered completely and removed
from the queue. At this point, the queue ID, 93869, is reusable for
another delivery.

=head2 Big Servers

See also I<I<qmail-ldap>>.

Scalable parallelism

Use a fast NFS network file server to store user directories. Set up
multiple equal-preference SMTP servers delivering to maildir mailboxes
on the file server.

=head2 Migrating from I<Sendmail> to I<qmail>

Check Dan Bernstein's I<Sendmail>->I<qmail> page at
L<http://cr.yp.to/qmail/sendmail.html>.

=head2 Mailing List Managers

Mailing list managers (MLM's) are systems that help list owners run
mailing lists. Their duties fall into two main divisions: managing the
lists of subscribers, and controlling the resending of messages to the
subscribers.

Most (all?) UNIX mailing list managers can be made to work with
I<qmail>.

I<ezmlm>

I<ezmlm> was written by Dan Bernstein, the author of I<qmail>. It was
written for use with I<qmail>, and relies on several features of
I<qmail>. Most notably, it uses I<VERPs> to reliably process bounce
messages. I<ezmlm> is somewhat unique among MLM's in that it doesn't
process commands sent to a central MLM address: it appends the command
to the name of the list. E.g., to subscribe to the
"foo@list.example.net" list, one sends a message to
"foo-subscribe@list.example.net".

For more information about I<ezmlm>, see L<http://www.ezmlm.org/>, the
unofficial I<ezmlm> web site, and the official home of I<ezmlm-idx>, a
very nice add-on that includes many useful features.

I<Majordomo>

I<Majordomo> is one of the most popular UNIX MLMs. It works fine with
I<qmail> provided a few simple changes are made. Russ Allbery has
written a FAQ about I<qmail>/I<Majordomo> available from
L<http://web.archive.org/web/20050308091420/http://www.eyrie.org/~eagle/faqs/mjqmail.html>.

=head2 Patches

Various source code patches are available for I<qmail>. To install a
patch, download it, cd to the I<qmail> source tree, and apply it using
the F<patch> command.

    cd /usr/local/src/qmail/qmail-1.03
    patch -p0 </tmp/patchfile

B<Note: >See the F<patch> F<man> page for more information. This is
just an example. Also, you might need to use a current version of GNU
patch to successfully apply some patches. See
L<http://www.gnu.org/software/patch/patch.html>.



Stop I<qmail> by killing F<qmail-send> or, if you installed the
F<qmailctl> script in the Installation section, do:

    qmailctl stop

Then rebuild and install the new binaries:

    make setup check

And restart I<qmail>:

    qmailctl start

Finally, test I<qmail>--especially the part you patched.

B<Note: >Although L<http://www.qmail.org/> lists many patches for
I<qmail>, B<none> of the them have been approved by the author of
qmail. They may introduce security, reliability, efficiency, or
functionality problems not present in I<qmail>. Most I<qmail>
installations only require the some of the Recommended patches. B<You>
B<should not install any patches that you don't clearly require.>



Recommended Patches

qmail.org has a "Recommended Patches" section:
L<http://qmail.org/top.html#patches>. These patches address the few
known bugs in qmail.

B<Note: >all of the Recommended Patches have been included in the
I<netqmail> distribution. See L<http://www.qmail.org/netqmail/>.

F<errno.h> patches

This patch fixes a problem with missing F<errno.h> inclusions. See
L<http://article.gmane.org/gmane.mail.qmail.general/13960> for a
detailed explanation and the patch itself.

Mate Wierdl has F<errno.h> patches for all of Dan Bernstein's software
including I<qmail>, I<daemontools>, and I<ucspi-tcp>. These patches
are available from
L<http://www.thedjbway.org/patches/djb_errno_patches.tgz>.

qmail-local TAB patch

This patch fixes a minor bug in the parsing of F<.qmail> files that
start with TAB characters.
L<http://www.ornl.gov/lists/mailing-lists/qmail/2000/10/msg00696.html>

IP 0.0.0.0 patch

This patch causes the IP address 0.0.0.0 to be recognized as local.
L<http://www.suspectclass.com/~sgifford/qmail/qmail-0.0.0.0.patch>

DNS

Historically, DNS responses have been limited to 512 bytes. Some large
sites have started returning MX responses longer than that. I<qmail>
and many other programs have a problem with Domain Name Server (DNS)
queries that return very large results. There are two ways to fix this
in I<qmail> and one workaround that might be sufficient for some
applications.

Christopher K. Davis' patch,
L<http://www.ckdhr.com/ckd/qmail-103.patch>

This is an adaptation of a patch by Chuck Foster that should work with
any resolver library, no matter how old, and uses a guard byte to
avoid the "number of bytes placed in the buffer" library bug. It
reallocates only once, to 65536, rather than just to the size needed,
so it can be less memory-efficient than Chuck's patch (though, like
his patch, it only reallocates if the response is larger than
PACKETSZ, which defaults to 512 bytes). After reallocating, it forces
a TCP query, rather than requiring the resolver library to do so
(avoiding an extra round-trip between qmail and the name server,
though if they're on the same machine or local network this is not a
big worry).

Bump the packet buffer size up to 65536

Works with recent BIND resolver libraries, which will automatically do
a TCP query within the library code if the reply comes back with the
truncation bit set. This is the simplest fix, though it's also
I<potentially> the most wasteful of memory, depending on how your
system handles paging. To do this, just replace F<PACKETSZ> with
F<65536> in F<dns.c> and rebuild I<qmail>.

Run F<dnscache> from I<djbdns>

F<dnscache> is, as the name implies, a caching DNS server. It knows
how to handle large DNS responses and removes unnecessary information
from them, so the response it returns is usually much smaller than the
direct response. It also generally improves DNS lookup performance for
all services that use DNS. Because it doesn't require patching
I<qmail>, this might be an acceptable workaround. Unfortunately, it's
not a complete fix because responses can still be too large for
I<qmail>. See the I<djbdns> section under I<Related Packages> for more
information.

I<qmail-ldap>

This patch, by Andre Oppermann, et al, implements Lightweight
Directory Access Protocol (LDAP) support in qmail. LDAP is like a
network phone book. Using I<qmail-ldap>, it should be possible for a
POP server to serve many thousands of users. See
L<http://www.nrg4u.com/>.

=head2 QMTP

QMTP is the Quick Mail Transfer Protocol, an SMTP replacement protocol
designed by Dan Bernstein. The protocol is defined at
L<http://cr.yp.to/proto/qmtp.txt>. QMTP is similar to SMTP, but is
simpler, faster, and incompatible with SMTP. I<qmail> includes a QMTP
server, F<qmail-qmtpd>, which is run very much like F<qmail-smtpd>.
QMTP usually uses port 209.

I<qmail> doesn't include a QMTP I<client>, but the I<serialmail>
package does. F<maildirqmtp> takes a maildir mailbox and delivers the
messages it contains to designated QMTP server via QMTP.

QMTP is not a drop-in replacement for SMTP, and is not yet in
widespread use across the Internet.

Russ Nelson has a patch for F<qmail-remote> that supports QMTP. It's
available from L<http://www.qmail.org/qmail-1.03-qmtpc.patch>. He also
has a tarball that can be extracted in F</service> to enable a QMTP
service. It's available from
L<http://www.qmail.org/qmtpd-service.tar.gz>.

=head2 Rejecting Invalid Recipients During SMTP Dialogue

When a remote server connects to F<qmail-smtpd> and offers it a
message, F<qmail-smtpd> checks the recipient addresses against the
contents of F<control/rcpthosts>. If the host or domain after the F<@>
symbol is listed in F<control/rcpthosts>, F<qmail-smtpd> accepts the
message, it's placed in the queue, and F<qmail-send> attempts
delivery. If the local recipient is invalid--there's no user or alias
by that name--F<qmail-send> generates a bounce message and sends it to
the return address specified during the SMTP dialogue.

In a well-behaved world, either strategy would be fine. Unfortunately,
there are a lot of poorly-behaved spammers out there. Some will
attempt to deliver messages to recipients that "might" exist on your
server--using a database of common names, a dictionary, or even a
generated list of all possible alphanumeric strings.

On a qmail system, such spam attacks can inflict a substantial load on
the system, fill the queue with junk, and delay the delivery of valid
messages.

Some MTAs validate the local recipient during the SMTP dialogue and
refuse to accept the message if the recipient is invalid. This saves
the server from a lot of unnecessary work, but has a negative side
effect, too. Using this validation, spammers can quickly determine
which addresses are valid.

There are several ways to implement recipient validation during the
SMTP dialogue with I<qmail>. Eben Pratt has assembled a list of them
at L<http://netdevice.com/qmail/rcptck/>. Most of these solutions
require maintaining a database of valid or invalid recipients or
patterns. One that doesn't is Paul Jarc's qmail-realrcptto, available
from L<http://code.dogmap.org./qmail/>.

=head2 TLS and STARTTLS

Scott Gifford has written a very thorough and detailed step-by-step
guide to using transport layer security (TLS) with I<qmail>. The guide
covers STARTTLS for SMTP and STLS for POP3D specifically for
I<netqmail>. It's available at
L<http://www.suspectclass.com/~sgifford/ucspi-tls/ucspi-tls-qmail-howto.html>.

Acknowledgments

First, thanks to Dan Bernstein for designing and writing such a
powerful and elegant system. After nearly ten years of use, I<qmail>
still impresses me.

I'd also like to thank the members of the I<qmail> mailing list. Two
members deserve special mention. The first is Russ Nelson, one of the
most helpful, patient, knowledgeable, and I<funny> contributors. His
contributions to the I<qmail> community are second only to DJB's. The
second is Charles Cazabon, who's close on Russ' heels. Charles is
currently the major contributor to the mailing list, answering more
questions correctly than anyone else. Charles has also written a
couple of very useful utilities, getmail and pymsgauth, and was
technical editor for B<The qmail Handbook> where his contributions
were I<critical> to the success of the book, and for which he has
received too little reward and recognition.

Thanks also to everyone who reviewed or contributed to this document,
including:

=over 4

=item *

Vince Vielhaber

=item *

Chris Green

=item *

Christopher K. Davis

=item *

Scott Schwartz

=item *

Fred Lindberg

=item *

Russell P. Sutherland

=item *

Alex Miller

=item *

Tim Hunter

=item *

Frank D. Cringle

=item *

Mahlon Smith

=item *

Rogerio Brito

=item *

Tony Hansmann

=item *

Matthias Andree

=item *

Tillman Hodgson

=item *

Stefan Witzel

=item *

Scott Gifford

=item *

too many others to mention...

=back

Special thanks to Henning Brauer for donating the lifewithqmail.org
domain I<and> hosting it!

Special thanks also to Michael M. Kadrie of ATLAS Design Group,
L<http://www.atlasdesigngroup.com>, for the nifty new I<qmail> logo!

B<Life with qmail> was written using Simple Document Format (SDF), a
very cool Perl-based markup language that generates HTML, plain text,
PostScript, POD, and other formats. It made the job I<much> easier.
See L<http://search.cpan.org/author/IANC/sdf-2.001/> for more
information.

Related Packages

I<dot-forward>

I<Sendmail> uses F<.forward> files, pronounced I<dot forward>, to
allow users to control the delivery of messages they receive. I<qmail>
uses a similar mechanism: F<.qmail> files. The I<dot-forward> package
gives I<qmail> the ability to use F<.forward> files. Systems running
I<Sendmail> or any other MTA that uses F<.forward> files might want to
consider using I<dot-forward> to avoid having to convert existing
F<.forward> files to their F<.qmail> equivalents--or simply to make
the transition to I<qmail> less visible to their users.

I<dot-forward> is a small package: easy to install and configure. The
source is available from
L<http://cr.yp.to/software/dot-forward-0.71.tar.gz>.

I<dot-forward> was written by Dan Bernstein, who maintains a web page
for it at L<http://cr.yp.to/dot-forward.html>.

I<fastforward>

I<fastforward> is another I<Sendmail> compatibility add-on.
I<Sendmail> uses a central alias database kept in a single file,
usually F</etc/aliases>. I<qmail> uses a series of F<dot-qmail> files
in F</var/qmail/alias>, one file per alias. If you're migrating to
I<qmail>, and you've got a I<Sendmail>-format aliases file you don't
want to convert, I<fastforward> gives I<qmail> the ability to use the
aliases file as-is.

The source is available from
L<http://cr.yp.to/software/fastforward-0.51.tar.gz>.

I<fastforward> was written by Dan Bernstein, who maintains a web page
for it at L<http://cr.yp.to/fastforward.html>.

I<ucspi-tcp>

I<qmail>'s SMTP server doesn't run as a stand alone daemon. A helper
program such as I<inetd>, I<xinetd>, or F<tcpserver> runs as a daemon.
When it receives a TCP connection to port 25, the SMTP port, it
executes a copy of F<qmail-smtpd>.

I<Inetd> is the standard network server "super-server". It can be
configured through F</etc/inetd.conf> to run F<qmail-smtpd>, but the
recommended tool is F<tcpserver>, which is part of the I<ucspi-tcp>
package. I<ucspi-tcp> is an acronym for UNIX Client-Server Program
Interface for TCP, and it's pronounced I<ooks-pie tee see pee>.

F<tcpserver> is preferred over I<inetd> because:

=over 4

=item *

F<tcpserver> allows one to limit the number of simultaneous
connections to a service. I<Inetd> has a connection-rate limiting
mechanism that temporarily disables services that are "too" busy.

=item *

F<tcpserver> can be configured to deny access to certain hosts or to
recognize local hosts and flag them so F<qmail-smtpd> can treat them
differently.

=item *

F<tcpserver> is the only server supported by the author of I<qmail>.

=back

The source is available from
L<http://cr.yp.to/ucspi-tcp/ucspi-tcp-0.88.tar.gz>.

Gerrit Pape distributes the documentation for I<ucspi-tcp> as F<man>
pages from L<http://smarden.org/pape/djb/>.

I<ucspi-tcp> was written by Dan Bernstein, who maintains a web page
for it at L<http://cr.yp.to/ucspi-tcp.html>.

I<daemontools>

The I<daemontools> package contains a set of utilities for controlling
and monitoring services. It's not mandatory, but it's highly
recommended, especially for busy systems. It includes:

=over 4

=item *

F<supervise>, which monitors a service and restarts it if it dies.

=item *

F<svc>, which talks to F<supervise> and allows one to stop, pause, or
restart the service.

=item *

F<multilog>, which maintains a log for a service, automatically
rotating it to keep it under the configured size.

=item *

F<setuidgid>, which runs programs for the superuser with a normal
user's UID and GID.

=back

The source for I<daemontools> is available from:
L<http://cr.yp.to/daemontools/daemontools-0.76.tar.gz>.

Gerrit Pape distributes the documentation for I<daemontools> as F<man>
pages from L<http://smarden.org/pape/djb/>.

I<daemontools> was written by Dan Bernstein, who maintains a web page
for it at L<http://cr.yp.to/daemontools.html>.

I<qmailanalog>

I<qmailanalog> processes I<qmail>'s log file and produces a series of
reports that tell one how much and what kind of work the system is
doing. If you need statistics about how many messages are being sent
or received, how big they are, and how quickly they're being
processed, I<qmailanalog> is what you need.

As a bonus, the F<matchup> program combines I<qmail>'s multiple log
lines per delivery into one--not unlike the familiar I<Sendmail> logs.

The source for I<qmailanalog> is available from
L<http://cr.yp.to/software/qmailanalog-0.70.tar.gz>.

I<qmailanalog> was written by Dan Bernstein, who maintains a web page
for it at L<http://cr.yp.to/qmailanalog.html>.

B<Note: >I<qmailanalog> relies on log entry timestamps in the
fractional second format used by F<accustamp>. In order to use it with
logs generated by F<multilog>, which are in TAI64N format, you'll need
to translate them into the old format. One program to do that is
available from L<http://www.qmail.org/tai64nfrac>.

I<rblsmtpd>

If you've never been spammed, consider yourself I<very> lucky. Most
e-mail users are all too familiar with Unsolicited Bulk E-mail (UBE),
aka "spam". Most of it is advertisements for sex sites, chain letters,
and other scams. Back in the days of old, up until around 1998 or so,
most MTA's on the Internet were I<open relays>, i.e., they would
accept mail from anyone I<for> anyone, even if neither sender nor
recipient was local. Spammers use open relays, if they can find any,
to deliver their spam. It covers their tracks, redirects the backlash
toward the "innocent" relay site, and saves them lots of CPU time and
network bandwidth.

Such open relays are considered B<very> bad form these days, and
several anti-spam vigilante groups have created a mechanism for
identifying open relays and other common sources of spam so they can
avoid accepting SMTP connections from them.

I<rblsmtpd> is an RBL SMTP Daemon. It sits between F<tcpserver> and
F<qmail-smtpd> and rejects connections from systems identified on one
of these lists.

For example, to run F<rblsmtpd> under F<tcpserver>, try something
like:

 #!/bin/sh
QMAILDUID=`id -u qmaild`
NOFILESGID=`id -g qmaild`
MAXSMTPD=`cat /var/qmail/control/concurrencyincoming`
exec /usr/local/bin/softlimit -m 2000000 \
  /usr/local/bin/tcpserver -v -R -H -l 0 -x /etc/tcp.smtp.cdb -c "$MAXSMTPD" \
    -u "$QMAILDUID" -g "$NOFILESGID" 0 smtp /usr/local/bin/rblsmtpd\
    -r relays.ordb.org /var/qmail/bin/qmail-smtpd 2>&1

I<rblsmtpd> was previously available as a separate utility, but is now
bundled with I<ucspi-tcp>.

I<rblsmtpd> was written by Dan Bernstein, who maintains a web page for
it at L<http://cr.yp.to/ucspi-tcp/rblsmtpd.html>.

Charles Cazabon has a patch that removes the default RBL hardcoded
into F<rblsmtpd> since it's no longer free. The patch is available
from L<http://pyropus.ca/software/misc/rblsmtpd-nodefaultrbl.patch>.

I<serialmail>

I<qmail> was designed for systems with full time, high speed
connectivity. I<serialmail> is a set of tools that make I<qmail>
better suited to intermittent, low speed connectivity. With
I<serialmail> on such a system, I<qmail> is configured to deliver all
remote mail to a single maildir. The I<serialmail> F<maildirsmtp>
command is used to upload the maildir to the ISP's mail hub when the
connection is brought up. If the ISP supports QMTP (see I<QMTP> under
I<Advanced Topics>), F<maildirqmtp> can also be used.

I<serialmail> can be used on the ISP side of the connection to
implement I<AutoTURN>: an SMTP connection by a client causes the
server to initiate a connection back to the client for sending
messages queued on the server for the client. This is similar to the
ETRN SMTP function.

The source for I<serialmail> is available from
L<http://cr.yp.to/software/serialmail-0.75.tar.gz>.

I<serialmail> was written by Dan Bernstein, who maintains a web page
for it at L<http://cr.yp.to/serialmail.html>.

I<mess822>

I<mess822> is a library and set of applications for parsing RFC 822
compliant mail messages. The applications include:

=over 4

=item *

F<ofmipd>: a daemon that accepts messages from clients and rewrites
From fields based on a database.

=item *

F<new-inject>: a F<qmail-inject> replacement that supports
user-controlled hostname rewriting.

=item *

F<iftocc>: a F<.qmail> utility for checking whether a message was sent
to a specific address.

=item *

F<822header>, F<822field>, F<822date>, and F<822received>: extract
information from a message.

=item *

F<822print>: pretty-prints a message.

=back

The source for I<mess822> is available from
L<http://cr.yp.to/software/mess822-0.58.tar.gz>.

I<mess822> was written by Dan Bernstein, who maintains a web page for
it at L<http://cr.yp.to/mess822.html>.

I<ezmlm>

I<ezmlm> is a high performance, easy-to-use mailing list manager (MLM)
for qmail. If you're familiar with I<LISTSERV> or I<Majordomo>, you
know what a mailing list manager does. For more information about
mailing lists under I<qmail> see I<Mailing List Managers> under
I<Advanced Topics>.

The source for I<ezmlm> is available from
L<http://cr.yp.to/software/ezmlm-0.53.tar.gz>.

I<ezmlm> was written by Dan Bernstein, who maintains a web page for it
at L<http://cr.yp.to/ezmlm.html>.

Fred Lindberg and Fred B. Ringel have developed an extension to
I<ezmlm> called I<ezmlm-idx>. It adds lots of useful features and is
highly recommended. It's now being maintained by Bruce Guenter
available from L<http://www.ezmlm.org/>.

I<safecat>

I<safecat> reliably writes a file into a maildir mailbox. It is
particularly useful for filing messages in I<procmail> recipes. For
example, the following recipe files all messages in F<Maildir>:

 :0w
|safecat Maildir/tmp Maildir/new

I<safecat> was written by Len Budney, who maintains a web page for it
at L<http://jeenyus.net/~budney/linux/software/safecat.html>.

I<djbdns>

I<djbdns> is a DNS server written by the author of I<qmail>. It
includes F<tinydns>, a DNS content server, and F<dnscache>, a caching
DNS server.

The official web page for I<djbdns> is L<http://cr.yp.to/djbdns.html>.

I<maildrop>

I<maildrop> is a mail filter similar to I<procmail>.

I<maildrop> was written by Sam Varshavchik, who maintains a web page
for it at L<http://www.courier-mta.org/maildrop/>.

I<syncdir>

I<syncdir> is small library that makes the F<link()> system call
synchronous. This is necessary when using I<qmail> with the queue on a
filesystem that doesn't perform F<link()> synchronously, such as
Linux's ext2fs, Reiserfs, SGI's XFS, and BSD FFS with softupdates.

I<syncdir> was written br Bruce Guenter and is available from
L<http://untroubled.org/syncdir/>. Installation instructions are
available from
L<http://www.ornl.gov/lists/mailing-lists/qmail/2001/12/msg00949.html>.

How Internet Mail Works

How a message gets from point A to point B

When a user on one host sends a message to a user on a another host,
many things happen behind the scenes that you may not be aware of.

Let's say Alice, F<alice@alpha.example.com>, wants to send a message
to Bob, F<bob@beta.example.com>. Here's what happens:

1. Alice composes the message with her mail user agent (MUA),
something like I<mutt> or I<pine>. She specifies the recipient in a
I<To> field, the subject of the message in a I<Subject> field, and the
text of the message itself. It looks something like:

    To: bob@beta
    Subject: lunch

    How about pizza?

2. When she's satisfied with the message, she tells the MUA to send
it.

3. At this point, the MUA can add additional header fields like
I<Date> and I<Message-Id> and modify the values Alice entered (e.g.,
replace F<bob@beta> with "F<Bob <bob@beta.example.com>>". Next, the
MUA I<injects> the message into the mail system. There are two ways to
this: it can run a program provided by the mail system for the purpose
of injecting messages, or it can open a connection to the Simple Mail
Transfer Protocol (SMTP) port on either the local system or a remote
mail server. For this example, we'll assume the MUA uses a local
injection program to pass messages to the MTA. The details of the
injection process vary by MTA, but on UNIX systems the I<sendmail>
method is a de facto standard. With this method, the MUA can put the
header and body in a file, separated by a blank line, and pass the
file to the F<sendmail> program.

4. If the injection succeeds--the message was syntactically correct
and F<sendmail> was invoked properly--the message is now the MTA's
responsibility. Details vary greatly by MTA, but generally the MTA on
alpha examines the header to determine where to send the message,
opens an SMTP connection to beta, and forwards the message to the MTA
on the beta system. The SMTP dialogue requires messages to be sent in
two parts: the I<envelope>, which specifies the recipient's address
(F<bob@beta.example.com>) and the return address
(F<alice@alpha.example.com>), and the message itself, which consists
of the header and body.

5. If the beta MTA rejects the message, perhaps because there's no
user I<bob> on the system, the MTA on alpha sends a I<bounce> message
to the return address, F<alice@alpha>, to notify her of the problem.

6. If the beta MTA accepts the message, it looks at the recipient's
address, determines whether it's local to beta or on a remote system.
In this case, it's local, so the MTA either delivers the message
itself or passes it to a I<mail delivery agent> (MDA) like
F</bin/mail> or F<procmail>.

7. If the delivery fails, perhaps because Bob has exceeded his mail
quota, the beta MTA sends a bounce message to the envelope return
address, F<alice@alpha>.

8. If the delivery succeeds, the message waits in Bob's mailbox until
his MUA reads it and displays it.

More information

For information about how Internet mail works, see one or more of the
following:

=over 4

=item *

Internet mail, by the author of I<qmail>. L<http://cr.yp.to/im.html>

=item *

SMTP, by the author of I<qmail>. L<http://cr.yp.to/smtp.html>

=item *

Internet mail message header format, by the author of I<qmail>.
L<http://cr.yp.to/immhf.html>

=back

Internet RFC's

Internet Requests for Comment (RFC's) are the official documentation
of the Internet. Most of these are well beyond the commentary stage,
and define Internet protocols such as TCP, FTP, Telnet, and the
various mail standards and protocols.

=over 4

=item *

RFC 821, Simple Mail Transfer Protocol (obsoleted by  RFC 2821)
L<http://www.ietf.org/rfc/rfc0821.txt>

=item *

RFC 822, Standard for the Format of ARPA Internet Text Messages
(obsoleted by RFC 2822) L<http://www.ietf.org/rfc/rfc0822.txt>

=item *

RFC 931, Authentication Server. L<http://www.ietf.org/rfc/rfc0931.txt>

=item *

RFC 974, Mail Routing and the Domain System.
L<http://www.ietf.org/rfc/rfc0974.txt>

=item *

RFC 1123, Requirements for Internet Hosts -- Application and Support.
L<http://www.ietf.org/rfc/rfc1123.txt>

=item *

RFC 1413, Identification Protocol.
L<http://www.ietf.org/rfc/rfc1413.txt>

=item *

RFC 1423, Privacy Enhancement for Internet Electronic Mail: Part III:
Algorithms, Modes, and Identifiers.
L<http://www.ietf.org/rfc/rfc1423.txt>

=item *

RFC 1651, SMTP Service Extensions.
L<http://www.ietf.org/rfc/rfc1651.txt>

=item *

RFC 1652, SMTP Service Extension for 8bit-MIMEtransport.
L<http://www.ietf.org/rfc/rfc1652.txt>

=item *

RFC 1806, Content disposition.  header.
L<http://www.ietf.org/rfc/rfc1806.txt>

=item *

RFC 1854, SMTP Service Extension for Command Pipelining.
L<http://www.ietf.org/rfc/rfc1854.txt>

=item *

RFC 1891, SMTP Service Extension for Delivery Status Notifications.
L<http://www.ietf.org/rfc/rfc1891.txt>

=item *

RFC 1892, The Multipart/Report Content Type for the Reporting of Mail
System Administrative Messages. L<http://www.ietf.org/rfc/rfc1892.txt>

=item *

RFC 1893, Enhanced mail system status codes.
L<http://www.ietf.org/rfc/rfc1893.txt>

=item *

RFC 1894, An Extensible Message Format for Delivery Status
Notifications. L<http://www.ietf.org/rfc/rfc1894.txt>

=item *

RFC 1939, Post Office Protocol - Version 3.
L<http://www.ietf.org/rfc/rfc1939.txt>

=item *

RFC 1985, SMTP Service Extension for Remote Message Queue Starting
(ETRN). L<http://www.ietf.org/rfc/rfc1985.txt>

=item *

RFC 1991, PGP Message Exchange Formats.
L<http://www.ietf.org/rfc/rfc1991.txt>

=item *

RFC 2015, MIME Security with Pretty Good Privacy.  (PGP).
L<http://www.ietf.org/rfc/rfc2015.txt>

=item *

RFC 2045, MIME Internet message bodies.
L<http://www.ietf.org/rfc/rfc2045.txt>

=item *

RFC 2046, MIME Media Types. L<http://www.ietf.org/rfc/rfc2046.txt>

=item *

RFC 2047, MIME Headers. L<http://www.ietf.org/rfc/rfc2047.txt>

=item *

RFC 2048, MIME Registration Procedures.
L<http://www.ietf.org/rfc/rfc2048.txt>

=item *

RFC 2049, MIME Conformance Criteria.
L<http://www.ietf.org/rfc/rfc2049.txt>

=item *

RFC 2142, Mailbox names for common services.
L<http://www.ietf.org/rfc/rfc2142.txt>

=item *

RFC 2183, Content Disposition header.
L<http://www.ietf.org/rfc/rfc2183.txt>

=item *

RFC 2821, Simple Mail Transfer Protocol.
L<http://www.ietf.org/rfc/rfc2821.txt>

=item *

RFC 2822, Internet Message Format
L<http://www.ietf.org/rfc/rfc2822.txt>

=back

A comprehensive list of mail-related RFC's is available from the
Internet Mail Consortium at L<http://www.imc.org/mail-standards.html>.

Architecture

Modular system architecture

Internet MTA's perform a variety of tasks. Earlier designs like
I<Sendmail> and I<smail> are I<monolithic>. In other words, they have
one large, complex program that "switches hats": it puts on one hat to
be an SMTP server, another to be an SMTP client, another to inject
messages locally, another to manage the queue, etc.

I<qmail> is I<modular>. Each of these functions is performed by a
separate program. As a result, the programs are much smaller, simpler,
and less likely to contain functional or security bugs. To further
enhance security, I<qmail>'s modules run with different privileges,
and they don't "trust" each other: they don't assume the other modules
always do only what they're supposed to do.

The core modules are:

 Modules                           Function
 qmail-smtpd                       accepts/rejects messages via SMTP
 qmail-inject                      injects messages locally
 qmail-rspawn/qmail-remote         handles remote deliveries
 qmail-lspawn/qmail-local          handles local deliveries
 qmail-send                        processes the queue
 qmail-clean                       cleans the queue

There's also a down side to the modular approach. Unlike a monolithic
MTA, the interactions between modules are well-defined, and modules
only exchange the minimum necessary information with each other. This
is generally A Good Thing, but sometimes it makes it hard to do
things. For example, the F<sendmail> "-v" flag causes I<Sendmail> to
print a trace of its actions to standard output for debugging
purposes. Since the one F<sendmail> binary handles injection,
queueing, alias processing, F<.forward> file processing, and remote
forwarding via SMTP, it is able to easily trace the entire delivery
until the message is delivered. The equivalent capability in I<qmail>
doesn't exist, and would require substantial code changes and
additional complexity to implement the passing of the "debug" flag
from module to module.

File structure

F</var/qmail> is the root of the I<qmail> file structure. This can be
changed when I<qmail> is being built, but it's a good idea to leave it
unchanged so other administrators know where to find things. If you
really want to relocate some or all of the I<qmail> tree, it's better
to do that using symbolic links. See the I<Create directories>
subsection of the Installation section for details.

The top-level subdirectories are:

 Directory                         Contents
 alias                             .qmail files for system-wide aliases
 bin                               program binaries and scripts
 boot                              startup scripts
 control                           configuration files
 doc                               documentation (except man pages)
 man                               man pages
 queue                             the queue of unsent messages
 users                             the qmail-users database files

Queue structure

The file F<INTERNALS> in the build directory discusses the details of
queueing more thoroughly. This is a broader overview of structure of
the queue.

 Subdirectory                      Contents
 bounce                            permanent delivery errors
 info*                             envelope sender addresses
 intd                              envelopes under construction by qmail-queue
 local*                            local envelope recipient addresses
 lock                              lock files
 mess*                             message files
 pid                               used by qmail-queue to acquire an i-node number
 remote*                           remote envelope recipient addresses
 todo                              complete envelopes

B<Note: >Directories marked with an "*" contain a series of I<split>
subdirectories named "0", "1", ..., up to (I<conf-split>-1), where
I<conf-split> is a compile-time configuration setting contained in the
file F<conf-split> in the build directory. It defaults to 23. The
purpose of splitting these directories is to reduce the number of
files in a single directory on very busy servers. I<conf-split> must
be a prime number.

Files under the F<mess> subdirectory are named after their i-node
number. What this means is that you can't manually move them using
standard UNIX utilities like F<mv>, F<dump>/F<restore>, and F<tar>.
There are a couple user-contributed utilities on
L<http://www.qmail.org/> that will rename queue files correctly.

B<Note: >B<It is not safe to modify queue files while I<qmail> is
running>. If you want to modify the queue, stop I<qmail> first, play
with the queue I<carefully>, then restart I<qmail>.

Pictures

There is a series of files in F</var/qmail/doc> with names starting
with F<PIC>. These are textual "pictures" of various situations that
I<qmail> handles. They show the flow of control through the various
modules, and are very helpful for debugging and creating complex
configurations.

 Filename                          Scenario
 PIC.local2alias                   locally-injected message delivered to a local alias
 PIC.local2ext                     locally-injected message delivered to an extension address
 PIC.local2local                   locally-injected message delivered to a local user
 PIC.local2rem                     locally-injected message delivered to a remote address
 PIC.local2virt                    locally-injected message delivered to an address on a local virtual domain
 PIC.nullclient                    a message injected on a null client
 PIC.relaybad                      a failed attempt to use the local host as a relay
 PIC.relaygood                     a successful attempt to use the local host as a relay
 PIC.rem2local                     a message received via SMTP for a local user

These files are also available on-line from:

=over 4

=item *

L<http://www.qmail.org/man/index.html>

=back

If you want I<real> pictures of I<qmail>, check out Andre Opperman's
"big qmail picture" at L<http://www.nrg4u.com/>.

Infrequently Asked Questions

These are questions that don't qualify as I<frequently> asked, but
which are important and not easy to answer.

How frequently does qmail try to send deferred messages?

Each message has its own retry schedule. The longer a message remains
undeliverable, the less frequently I<qmail> tries to send it. The
retry schedule is not configurable. The following table shows the
retry schedule for a message that's undeliverable to a remote
recipient until it bounces. Local messages use a similar, but more
frequent, schedule.

 Delivery Attempt      Seconds                 D-HH:MM:SS
 1                     0                       0-00:00:00
 2                     400                     0-00:06:40
 3                     1600                    0-00:26:40
 4                     3600                    0-01:00:00
 5                     6400                    0-01:46:40
 6                     10000                   0-02:46:40
 7                     14400                   0-04:00:00
 8                     19600                   0-05:26:40
 9                     25600                   0-07:06:40
 10                    32400                   0-09:00:00
 11                    40000                   0-11:06:40
 12                    48400                   0-13:26:40
 13                    57600                   0-16:00:00
 14                    67600                   0-18:46:40
 15                    78400                   0-21:46:40
 16                    90000                   1-01:00:00
 17                    102400                  1-04:26:40
 18                    115600                  1-08:06:40
 19                    129600                  1-12:00:00
 20                    144400                  1-16:06:40
 21                    160000                  1-20:26:40
 22                    176400                  2-01:00:00
 23                    193600                  2-05:46:40
 24                    211600                  2-10:46:40
 25                    230400                  2-16:00:00
 26                    250000                  2-21:26:40
 27                    270400                  3-03:06:40
 28                    291600                  3-09:00:00
 29                    313600                  3-15:06:40
 30                    336400                  3-21:26:40
 31                    360000                  4-04:00:00
 32                    384400                  4-10:46:40
 33                    409600                  4-17:46:40
 34                    435600                  5-01:00:00
 35                    462400                  5-08:26:40
 36                    490000                  5-16:06:40
 37                    518400                  6-00:00:00
 38                    547600                  6-08:06:40
 39                    577600                  6-16:26:40
 40                    608400                  7-01:00:00

Why can't I send mail to a large site with lots of MX's?

If you're getting:

 deferral: CNAME_lookup_failed_temporarily._(#4.4.3)/

The problem might be that I<qmail> can't handle large name server
query responses. The fix is to install a patch or workaround. See
I<Patches> under Advanced Topics.

There's also a question as to why some people I<don't> have trouble
reaching such systems. Basically, depending on the timing and ordering
of queries made to your local nameserver, the size of the response to
an F<ANY> query for "aol.com" may be larger than the 512 byte limit of
a UDP packet, or it may not.

"May not" is likely to happen if the A and MX records time out, but
the NS records don't. Since the .COM servers set a 2 day TTL on those,
but AOL sets a 1 hour TTL on their records, this will often happen on
less busy nameservers. Busier nameservers are more likely to have
those records in their cache at any given time, frustrating an
unpatched I<qmail>'s attempts to check for CNAMEs.

A better test is to send mail to F<nosuchuser@large-mx.ckdhr.com>; if
it clears your queue and winds up bouncing from ckdhr.com, your MTA
can send mail to hosts with MX lists that exceed 512 bytes. (By using
a single RRset, with a single TTL, that exceeds 512 bytes, the problem
can be seen without depending on the timing and ordering of other
queries.)

What is F<QUEUE_EXTRA>?

F<QUEUE_EXTRA> is a compile-time configuration variable that specifies
an additional recipient that will be added to every delivery. This is
used primarily for logging. E.g., the FAQ describes how to use
F<QUEUE_EXTRA> to keep copies of all incoming and outgoing messages.

To use F<QUEUE_EXTRA>, edit F<extra.h> specifying the additional
recipient in the format F<"TI<recipient>\0">, and the length of the
F<QUEUE_EXTRA> string in F<QUEUE_EXTRALEN> (the "\0" counts as one
character). For example:

    #define QUEUE_EXTRA "Tlog\0"
    #define QUEUE_EXTRALEN 5

Shut down I<qmail> if it's running. If you installed the F<qmailctl>
script from the Installation section, that can be done by:

    qmailctl stop

If you don't have the F<qmailctl> script, you should use your
startup/shutdown script or send F<qmail-send> a F<TERM> signal.

Then rebuild I<qmail> using:

    make setup check

Populate F<~alias/.qmail-log> with whatever logging you want. E.g., to
log Message-ID's:

    | awk '/^$/ { exit } /^[mM][eE][sS][sS][aA][gG][eE]-/ { print }'

Finally, restart I<qmail>.

Error Messages

I<qmail> error messages and what they mean.

See I<RFC 1893> for an explanation of the error codes in parentheses.

I<This appendix is incomplete.>

Gotchas

These "gotchas" frequently cause problems for I<qmail> newbies.

I<qmail> doesn't deliver mail to superusers.

To prevent the possibility of F<qmail-local> running commands as a
privileged user, I<qmail> ignores all users whose UID is 0. This is
documented in the F<qmail-getpw> man page.

That doesn't mean I<qmail> won't deliver to F<root>, it just means
that such a delivery will have to be handled by a non-privileged user.
Typically, one creates an alias for root by populating
F<~alias/.qmail-root>.

I<qmail> doesn't deliver mail to users who don't own their home
directory.

Another security feature, and just good general practice. This is
documented in the F<qmail-getpw> man page.

I<qmail> doesn't deliver mail to users whose usernames contain
uppercase letters.

I<qmail> converts the entire "local part"--everything left of the "@"
in an address, to lowercase. The man page doesn't come out and say
that, but the code does. The fact that it ignores users with uppercase
characters is documented in the F<qmail-getpw> man page.

I<qmail> replaces dots (.) in extension addresses with colons (:).

Another security feature. The purpose is prevent extension addresses
from backing up the file tree using "..". By replacing them with
colons, I<qmail> ensures that all F<.qmail> files for a user are under
their home directory. Documented in the F<dot-qmail> man page.

I<qmail> converts uppercase characters in extension addresses to
lowercase.

This is another result of the fact that I<qmail> lowercases the entire
local part of addresses. Documented in the F<dot-qmail> man page.

I<qmail> doesn't use F</etc/hosts>.

I<qmail> B<never> uses F</etc/hosts> to determine the IP address
associated with a host name. If you use names in control files,
I<qmail> must have access to a name server.

It I<is> possible to run I<qmail> on systems without access to a name
server, though. Hosts in control files can be specified by IP address
by enclosing them in square brackets ([]), e.g.:

    [10.1.2.219]

Actually, the square brackets aren't I<always> necessary--but it's a
good idea to use them anyway.

I<qmail> doesn't log SMTP activity.

For a number of reasons, I<qmail> doesn't log SMTP connections,
rejections, invalid commands, or valid commands. F<tcpserver> can be
used to log connections, and F<recordio> can be used to log the entire
SMTP dialogue. F<recordio> is part of the I<I<ucspi-tcp>> package. The
procedure is documented in the FAQ at
L<http://cr.yp.to/qmail/faq/servers.html#recordio>.

I<qmail> doesn't generate deferral notices.

If I<Sendmail> is unable to deliver a message within a few hours,
typically four, it sends a deferral notice to the originator. These
notices look like bounce messages, but don't indicate that the
delivery has failed permanently, yet.

I<qmail> doesn't send such warnings. An undeliverable message will
only be returned to the originator after it spends I<F<queuelifetime>>
in the queue.

I<qmail> is slow if F</var/qmail/queue/lock/trigger> is gone/has the
wrong permissions/is a regular file.

F<qmail-queue> and F<qmail-send> communicate via a named pipe called
F</var/qmail/queue/lock/trigger>. If this pipe gets messed up,
F<qmail-send> doesn't notice new messages for a half hour or so.

The best way to ensure that it's set up right is to run "make check"
from the source directory. If that's not possible, make sure it looks
like:

 # ls -l /var/qmail/queue/lock/trigger
prw--w--w-   1 qmails   qmail           0 Jul  5 21:25 /var/qmail/queue/lock/trigger

Pay particular attention to the "p" at the beginning of the line (says
it's a named pipe), the mode (especially world writable), and the
owner/group.

DNS or IDENT lookups can make SMTP slow.

If F<qmail-smtpd> is slow to respond to connections, the problem is
probably due to DNS reverse lookups or IDENT lookups. If you're
starting F<qmail-smtpd> with F<tcpserver>, remove the "-h", "-p", and
"-r" options and add "-H", "-P", "-R", and "-l I<hostname>".

See the F<tcpserver> documentation at
L<http://cr.yp.to/ucspi-tcp/tcpserver.html> for an explanation of
these options.

Carriage Return/Linefeed (CRLF) line breaks don't work.

F<qmail-inject> and other local injection mechanisms like F<sendmail>
don't work right when messages are injected with DOS-style carriage
return/linefeed (CRLF) line breaks. Unlike I<Sendmail>, I<qmail>
requires locally-injected messages to use Unix newlines (LF only).
This is a common problem with PHP scripts.

F<qmail-send> or F<tcpserver> stop working if logs back up.

If you're logging to a supervised log service, as described in section
2, and the log service fails for any reason: disk full, typo in the
F<run> script, log directory configuration error, etc., the pipeline
will eventually fill up, causing the service to block, or hang. Fix
the problem (see I<Troubleshooting>) and everything will return to
normal.

F<qmail-smtpd> doesn't validate the local part of an address.

If F<example.com> is listed in F<control/rcpthosts>, mail to
F<I<anything>@example.com> will be accepted during the SMTP session.
If F<I<anything>> isn't a valid user or alias, I<qmail> will send a
bounce message to the envelope sender address.

Some simpleminded relaying tests assume that if a message is accepted,
it will be delivered. That's wrong. If someone claims that your system
is an open relay, demand to see a copy of message relayed through
it--including the complete header, especially the Received
fields--then compare them with your logs.

See the I<Rejecting Invalid Recipients During SMTP Dialogue> section
for information about ways to add recipient validation to I<qmail>.

Firewalls can block remote access to your SMTP/POP3/IMAP server.

If you've installed an SMTP, POP3, or IMAP server, and you can connect
to it from the local host or a host on the local network, but not from
a remote host, a firewall might be the problem.

The first place to look is on the server itself. Red Hat Linux, for
example, blocks SMTP in the default configuration using F<iptables>.
Other packet filtering mechanisms such as F<ipchains> may also be
responsible.

It's also possible that your Internet Service Provider (ISP) blocks
certain ports to prevent spamming or enforce their Terms of Service
(TOS). Contact your ISP's tech support I<after> ensuring that packet
filtering isn't responsible and that running a server doesn't violate
your TOS.

F<qmail-inject> sets F<From> field to F<anonymous> if F<USER> and
F<LOGNAME> aren't set.

If a message sent via F<qmail-inject> doesn't contain a F<From> field,
F<qmail-inject> looks for environment variables to tell it which user
is sending the message. The variables it looks for, in order, are:
F<QMAILUSER>, F<MAILUSER>, F<USER>,  and  F<LOGNAME>,

Normal user login sessions usually set one or both of F<USER> and
F<LOGNAME>, but some batch jobs, such as those started by F<cron>
might not have either of these set.

To cause your F<cron> jobs to have a valid F<From> field, set one
these environment variables before sending any mail messages.

F<qmail-send> doesn't always exit immediately when killed.

Sending F<qmail-send> a F<TERM> signal doesn't cause it to exit
immediately if there are deliveries in progress. F<qmail-send> will
wait for all F<qmail-local> and F<qmail-remote> processes to finish
before it exits so it can record the results of these deliveries.
Because of this, "F<qmailctl restart>" or "F<qmailctl stop>" might
report that F<qmail-send> has been stopped, even though it's still
running. Always run "F<qmailctl stat>" to verify that the stop or
restart has actually completed.

Also note that F<qmail-send> makes a pass through the queue before
exiting, so with very large queues this can cause a noticeable delay.

Delivering to F</dev/null> doesn't throw messages away.

A delivery instruction like:

  /dev/null

Causes I<qmail> to think that F</dev/null> is an mbox mailbox, but
since F</dev/null> is a special file, I<qmail> can't deliver to it
successfully.

The best was to throw messages away is to create a F<.qmail> file that
contains no valid delivery instructions I<but> isn't empty. (Empty
F<.qmail> files are treated as if they contain the default delivery
instructions specified in F<defaultdelivery> or on the F<qmail-start>
command line.) This is accomplished by populating the file with
nothing but comments.

For example, a F<.qmail> file containing only:

  #

or:

  # throw messages away undelivered

will efficiently throw messages away without delivering them.

Modifying the queue while F<qmail-send> is running is I<dangerous>.

Modifying any of the files or directories under F</var/qmail/queue>
while F<qmail-send> is running without knowing B<exactly> what you're
doing is likely to result in a corrupt queue--e.g., messages in an
undefined state, bizarre error messages in the logs, duplicate
deliveries, bogus bounces, etc. Once this happens, you'll have to find
and run a queue checking utility (there are a couple listed on
qmail.org) or create a new, empty queue.

If you want to modify the queue, stop I<qmail> first, play with the
queue carefully, then restart I<qmail>. Note that corruption is still
possible with F<qmail-send> stopped, so you still have to know what
you're doing.

Frequently Asked Questions about B<Life with qmail>

What version is B<Life with qmail>?

This is LWQ version 2007-11-30.

Who owns B<Life with qmail>?

B<Life with qmail> is Copyright 1999-2007 David E. Sill

L<http://Web.InfoAve.Net/~dsill/dave/>

How is B<Life with qmail> licensed?

B<Life with qmail> is covered by the OpenContent License, version 1.0.
See L<http://www.opencontent.org/opl.shtml> for the full license.
Basically, you can copy, redistribute, or modify B<Life with qmail>
provided that modified versions, if redistributed, are also covered by
the OpenContent License.

How can I be notified when new releases of LWQ are made available?

Join the F<lwq-announce> mailing list by sending a message to
I<lwq-announce-subscribe@sws1.ctd.ornl.gov>.

Where can LWQ contributors and fans talk about it?

Join the F<lwq> mailing list by sending a message to
I<lwq-subscribe@sws1.ctd.ornl.gov>.

Has B<Life with qmail> been translated to I<language>?

Maybe. LWQ has been translated into a few languages. See
L<http://lifewithqmail.org/trans.html> for more information about LWQ
translations.

Is B<Life with qmail> available in PostScript, PDF, plain text, or any
other format beside HTML?

Yes, alternative formats can be found at L<http://lifewithqmail.org/>.

I used B<Life with qmail> and it crashed my system/erased my hard
disk/ruined my love life/killed my dog/etc.

I'm sorry. Really sorry. But B<Life with qmail> comes with no
warranty. See the OpenContent License mentioned above. I didn't get
paid to write it, I just wanted to contribute something useful to the
I<qmail> community.

Actually, this isn't a FAQ. In fact, I hope it's a NAQ (Never Asked
Question).

How can I contribute to LWQ?

Please send corrections, suggestions, complaints, etc. to
I<lwq@sill.org>.

If you'd like to make a larger contribution, such as a new subsection
or appendix, that's great! You might want to check with me first to
make sure the topic is something I want to cover in LWQ and that
nobody else is already working on it.

Another way to support LWQ is to shop at my bookstore, in association
with Amazon.com, using this link:
L<http://www.amazon.com/exec/obidos/redirect-home/davesill>.

Thanks for your support!

What's changed in this version of LWQ?

=over 4

=item *

Updated for netqmail 1.06.

=item *

Added info for Wheeler book.

=item *

Fixed various typos.

=item *

Fixed some dead links.

=back

What changed in the 2006-01-02 version of LWQ?

=over 4

=item *

Lots of minor tweaks, fixed dead links, etc.

=item *

/dev/null gotcha added. Thanks to Payal Rathod.

=item *

Expanded F<nosuid> warning. Thanks to Tony Hansmann.

=item *

Added link to Cazabon's nodefaultrbl patch. Thanks to Jeremy Kister.

=item *

Added mkdirs to qmail-pop3d instructions. Thanks to Larry Weldon.

=item *

Added note about errno patch for checkpasswd. Thanks to tlad.

=item *

Added smarthost relay subsection. Thanks to the Silver Dirk.

=item *

Improved Qmail-Scanner wording. Thanks to Jason Haar.

=item *

Added a section for Yenigul's book. Thanks to Ismail Yenigul.

=item *

Added abuse@ alias. Thanks to Charles Cazabon.

=item *

Added ucspi-tls section. Thanks to Scott Gifford.

=item *

Added queue modification gotcha.

=back

What changed in the 2004-06-30 version of LWQ?

=over 4

=item *

Incorporated new I<qmail> logo. Thanks to Michael Kadrie.

=item *

Fixed various typos.

=item *

Updated Macintosh OS X note.

=item *

Updated ClamAV link.

=item *

Added recipient validation section to Advanced Topics.

=item *

Fixed "setuid/exe required for queue filesystem" wording.

=back

What changed in the 2004-03-28 version of LWQ?

=over 4

=item *

Updated info for Levine book.

=item *

Fixed typo in "What changed in the 2004-03-01 version of LWQ?".

=item *

Added comment in G.16 about F<qmail-send> scanning the queue before
exiting.

=back

What changed in the 2004-03-01 version of LWQ?

=over 4

=item *

G.16 said "KILL", should have been "TERM".

=item *

Added softlimit-too-low example error message.

=item *

Fixed E.2, CNAME lookup problem.

=back

What changed in the 2004-01-26 version of LWQ?

=over 4

=item *

Updated for netqmail 1.05.

=item *

Fixed minor typos.

=back

What changed in the 2003-11-10 version of LWQ?

=over 4

=item *

Fixed minor typos.

=back

What changed in the 2003-10-30 version of LWQ?

=over 4

=item *

Adjusted installation for I<netqmail> distribution.

=item *

Updated Binc IMAP entry.

=back

What changed in the 2003-08-16 version of LWQ?

=over 4

=item *

Added this change log section. Thanks to Jerry Asher for requesting
it.

=item *

Added note about noexec and nosuid to system requirements section.

=item *

Added link to inst_check and examples to the testing section.

=item *

Added link to Mate Wierdl's errno patches to the patch section.

=item *

Added OS X note to system requirements section.

=item *

Added Cyrus entry to IMAP server section. Thanks to Rick Updegrove.

=item *

Added Dovecot entry to IMAP server section.

=item *

Reworded part of the entension section. Thanks to Adrian Ho.

=item *

Reformatted the POP run scripts for easier copying and pasting. Thanks
to Woody Preston.

=item *

Fixed a typo in the section on Chuck Foster's DNS patch. Thanks to
Josh Parreco.

=item *

Fixed a couple typos in the QMTP section. Thanks to Marek Gutkowski.

=back

=for html <a href="http://www.opencontent.org/"> <img

=for html src="http://www.opencontent.org/takeone.gif" border=0 alt="Take One!"></a>

